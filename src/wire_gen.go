// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package src

import (
	"github.com/google/wire"
	"github.com/traPtitech/trap-collection-server/pkg/common"
	"github.com/traPtitech/trap-collection-server/src/auth"
	"github.com/traPtitech/trap-collection-server/src/auth/traQ"
	"github.com/traPtitech/trap-collection-server/src/cache"
	"github.com/traPtitech/trap-collection-server/src/cache/ristretto"
	"github.com/traPtitech/trap-collection-server/src/handler/v1"
	"github.com/traPtitech/trap-collection-server/src/repository"
	"github.com/traPtitech/trap-collection-server/src/repository/gorm2"
	"github.com/traPtitech/trap-collection-server/src/service"
	v1_2 "github.com/traPtitech/trap-collection-server/src/service/v1"
	"github.com/traPtitech/trap-collection-server/src/storage"
	"github.com/traPtitech/trap-collection-server/src/storage/local"
	"github.com/traPtitech/trap-collection-server/src/storage/swift"
	"net/http"
)

// Injectors from wire.go:

func injectSwiftStorage(config *Config) (*Storage, error) {
	swiftAuthURL := config.SwiftAuthURL
	swiftUserName := config.SwiftUserName
	swiftPassword := config.SwiftPassword
	swiftTenantName := config.SwiftTenantName
	swiftTenantID := config.SwiftTenantID
	swiftContainer := config.SwiftContainer
	filePath := config.FilePath
	cache, err := swift.NewCache(filePath)
	if err != nil {
		return nil, err
	}
	client, err := swift.NewClient(swiftAuthURL, swiftUserName, swiftPassword, swiftTenantName, swiftTenantID, swiftContainer, cache)
	if err != nil {
		return nil, err
	}
	gameImage := swift.NewGameImage(client)
	gameVideo := swift.NewGameVideo(client)
	gameFile := swift.NewGameFile(client)
	storage := newStorage(gameImage, gameVideo, gameFile)
	return storage, nil
}

func injectLocalStorage(config *Config) (*Storage, error) {
	filePath := config.FilePath
	directoryManager := local.NewDirectoryManager(filePath)
	gameImage, err := local.NewGameImage(directoryManager)
	if err != nil {
		return nil, err
	}
	gameVideo, err := local.NewGameVideo(directoryManager)
	if err != nil {
		return nil, err
	}
	gameFile, err := local.NewGameFile(directoryManager)
	if err != nil {
		return nil, err
	}
	storage := newStorage(gameImage, gameVideo, gameFile)
	return storage, nil
}

func InjectAPI(config *Config) (*Service, error) {
	sessionKey := config.SessionKey
	sessionSecret := config.SessionSecret
	session := v1.NewSession(sessionKey, sessionSecret)
	administrators := config.Administrators
	client := config.HttpClient
	traQBaseURL := config.TraQBaseURL
	user := traq.NewUser(client, traQBaseURL)
	ristrettoUser, err := ristretto.NewUser()
	if err != nil {
		return nil, err
	}
	userUtils := v1_2.NewUserUtils(user, ristrettoUser)
	administratorAuth := v1_2.NewAdministratorAuth(administrators, userUtils)
	isProduction := config.IsProduction
	db, err := gorm2.NewDB(isProduction)
	if err != nil {
		return nil, err
	}
	launcherVersion := gorm2.NewLauncherVersion(db)
	launcherUser := gorm2.NewLauncherUser(db)
	launcherSession := gorm2.NewLauncherSession(db)
	launcherAuth := v1_2.NewLauncherAuth(db, launcherVersion, launcherUser, launcherSession)
	game := gorm2.NewGame(db)
	gameManagementRole, err := gorm2.NewGameManagementRole(db)
	if err != nil {
		return nil, err
	}
	gameAuth := v1_2.NewGameAuth(db, game, gameManagementRole, userUtils)
	oidc := traq.NewOIDC(client, traQBaseURL)
	clientID := config.OAuthClientID
	v1OIDC := v1_2.NewOIDC(oidc, clientID)
	middleware := v1.NewMiddleware(session, administratorAuth, launcherAuth, gameAuth, v1OIDC)
	v1User := v1_2.NewUser(userUtils)
	user2 := v1.NewUser(session, v1User)
	gameVersion := gorm2.NewGameVersion(db)
	v1Game := v1_2.NewGame(db, game, gameVersion, userUtils)
	game2 := v1.NewGame(session, v1Game)
	gameRole := v1.NewGameRole(session, gameAuth)
	gameImage, err := gorm2.NewGameImage(db)
	if err != nil {
		return nil, err
	}
	storage, err := injectedStorage(config)
	if err != nil {
		return nil, err
	}
	storageGameImage := storage.GameImage
	v1GameImage := v1_2.NewGameImage(db, game, gameImage, storageGameImage)
	gameImage2 := v1.NewGameImage(v1GameImage)
	gameVideo, err := gorm2.NewGameVideo(db)
	if err != nil {
		return nil, err
	}
	storageGameVideo := storage.GameVideo
	v1GameVideo := v1_2.NewGameVideo(db, game, gameVideo, storageGameVideo)
	gameVideo2 := v1.NewGameVideo(v1GameVideo)
	v1GameVersion := v1_2.NewGameVersion(db, game, gameVersion)
	gameVersion2 := v1.NewGameVersion(v1GameVersion)
	gameFile, err := gorm2.NewGameFile(db)
	if err != nil {
		return nil, err
	}
	storageGameFile := storage.GameFile
	v1GameFile := v1_2.NewGameFile(db, game, gameVersion, gameFile, storageGameFile)
	gameFile2 := v1.NewGameFile(v1GameFile)
	gameURL := gorm2.NewGameURL(db)
	v1GameURL := v1_2.NewGameURL(db, game, gameVersion, gameURL)
	gameURL2 := v1.NewGameURL(v1GameURL)
	v1LauncherAuth := v1.NewLauncherAuth(launcherAuth)
	v1LauncherVersion := v1_2.NewLauncherVersion(db, launcherVersion, game)
	launcherVersion2 := v1.NewLauncherVersion(v1LauncherVersion)
	oAuth2 := v1.NewOAuth2(traQBaseURL, session, v1OIDC)
	api := v1.NewAPI(middleware, user2, game2, gameRole, gameImage2, gameVideo2, gameVersion2, gameFile2, gameURL2, v1LauncherAuth, launcherVersion2, oAuth2, session)
	service := NewService(api, db)
	return service, nil
}

// wire.go:

type Config struct {
	IsProduction    common.IsProduction
	IsSwift         common.IsSwift
	SessionKey      common.SessionKey
	SessionSecret   common.SessionSecret
	TraQBaseURL     common.TraQBaseURL
	OAuthClientID   common.ClientID
	Administrators  common.Administrators
	SwiftAuthURL    common.SwiftAuthURL
	SwiftUserName   common.SwiftUserName
	SwiftPassword   common.SwiftPassword
	SwiftTenantID   common.SwiftTenantID
	SwiftTenantName common.SwiftTenantName
	SwiftContainer  common.SwiftContainer
	FilePath        common.FilePath
	HttpClient      *http.Client
}

type Storage struct {
	GameImage storage.GameImage
	GameVideo storage.GameVideo
	GameFile  storage.GameFile
}

func newStorage(
	gameImage storage.GameImage,
	gameVideo storage.GameVideo,
	gameFile storage.GameFile,
) *Storage {
	return &Storage{
		GameImage: gameImage,
		GameVideo: gameVideo,
		GameFile:  gameFile,
	}
}

var (
	isProductionField    = wire.FieldsOf(new(*Config), "IsProduction")
	isSwiftField         = wire.FieldsOf(new(*Config), "IsSwift")
	sessionKeyField      = wire.FieldsOf(new(*Config), "SessionKey")
	sessionSecretField   = wire.FieldsOf(new(*Config), "SessionSecret")
	traQBaseURLField     = wire.FieldsOf(new(*Config), "TraQBaseURL")
	oAuthClientIDField   = wire.FieldsOf(new(*Config), "OAuthClientID")
	administratorsField  = wire.FieldsOf(new(*Config), "Administrators")
	swiftAuthURLField    = wire.FieldsOf(new(*Config), "SwiftAuthURL")
	swiftUserNameField   = wire.FieldsOf(new(*Config), "SwiftUserName")
	swiftPasswordField   = wire.FieldsOf(new(*Config), "SwiftPassword")
	swiftTenantIDField   = wire.FieldsOf(new(*Config), "SwiftTenantID")
	swiftTenantNameField = wire.FieldsOf(new(*Config), "SwiftTenantName")
	swiftContainerField  = wire.FieldsOf(new(*Config), "SwiftContainer")
	filePathField        = wire.FieldsOf(new(*Config), "FilePath")
	httpClientField      = wire.FieldsOf(new(*Config), "HttpClient")

	gameImageField = wire.FieldsOf(new(*Storage), "GameImage")
	gameVideoField = wire.FieldsOf(new(*Storage), "GameVideo")
	gameFileField  = wire.FieldsOf(new(*Storage), "GameFile")
)

func injectedStorage(config *Config) (*Storage, error) {
	if config.IsSwift {
		return injectSwiftStorage(config)
	}

	return injectLocalStorage(config)
}

var (
	dbBind                        = wire.Bind(new(repository.DB), new(*gorm2.DB))
	gameRepositoryBind            = wire.Bind(new(repository.Game), new(*gorm2.Game))
	gameVersionRepositoryBind     = wire.Bind(new(repository.GameVersion), new(*gorm2.GameVersion))
	gameImageRepositoryBind       = wire.Bind(new(repository.GameImage), new(*gorm2.GameImage))
	gameVideoRepositoryBind       = wire.Bind(new(repository.GameVideo), new(*gorm2.GameVideo))
	gameFileRepositoryBind        = wire.Bind(new(repository.GameFile), new(*gorm2.GameFile))
	gameURLRepositoryBind         = wire.Bind(new(repository.GameURL), new(*gorm2.GameURL))
	gameManagementRoleBind        = wire.Bind(new(repository.GameManagementRole), new(*gorm2.GameManagementRole))
	launcherSessionRepositoryBind = wire.Bind(new(repository.LauncherSession), new(*gorm2.LauncherSession))
	launcherUserRepositoryBind    = wire.Bind(new(repository.LauncherUser), new(*gorm2.LauncherUser))
	launcherVersionRepositoryBind = wire.Bind(new(repository.LauncherVersion), new(*gorm2.LauncherVersion))

	oidcAuthBind = wire.Bind(new(auth.OIDC), new(*traq.OIDC))
	userAuthBind = wire.Bind(new(auth.User), new(*traq.User))

	userCacheBind = wire.Bind(new(cache.User), new(*ristretto.User))

	administratorAuthServiceBind = wire.Bind(new(service.AdministratorAuth), new(*v1_2.AdministratorAuth))
	gameAuthServiceBind          = wire.Bind(new(service.GameAuth), new(*v1_2.GameAuth))
	gameServiceBind              = wire.Bind(new(service.Game), new(*v1_2.Game))
	gameVersionServiceBind       = wire.Bind(new(service.GameVersion), new(*v1_2.GameVersion))
	gameImageServiceBind         = wire.Bind(new(service.GameImage), new(*v1_2.GameImage))
	gameVideoServiceBind         = wire.Bind(new(service.GameVideo), new(*v1_2.GameVideo))
	gameFileServiceBind          = wire.Bind(new(service.GameFile), new(*v1_2.GameFile))
	gameURLServiceBind           = wire.Bind(new(service.GameURL), new(*v1_2.GameURL))
	launcherAuthServiceBind      = wire.Bind(new(service.LauncherAuth), new(*v1_2.LauncherAuth))
	launcherVersionServiceBind   = wire.Bind(new(service.LauncherVersion), new(*v1_2.LauncherVersion))
	oidcServiceBind              = wire.Bind(new(service.OIDC), new(*v1_2.OIDC))
	userServiceBind              = wire.Bind(new(service.User), new(*v1_2.User))
)

type Service struct {
	*v1.API
	repository.DB
}

func NewService(api *v1.API, db repository.DB) *Service {
	return &Service{
		API: api,
		DB:  db,
	}
}
