// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"fmt"
	"github.com/google/wire"
	"github.com/traPtitech/trap-collection-server/src/auth/traQ"
	"github.com/traPtitech/trap-collection-server/src/cache/ristretto"
	"github.com/traPtitech/trap-collection-server/src/config"
	"github.com/traPtitech/trap-collection-server/src/config/v1"
	v1_2 "github.com/traPtitech/trap-collection-server/src/handler/v1"
	"github.com/traPtitech/trap-collection-server/src/repository"
	"github.com/traPtitech/trap-collection-server/src/repository/gorm2"
	v1_3 "github.com/traPtitech/trap-collection-server/src/service/v1"
	"github.com/traPtitech/trap-collection-server/src/storage"
	"github.com/traPtitech/trap-collection-server/src/storage/local"
	"github.com/traPtitech/trap-collection-server/src/storage/swift"
)

// Injectors from storage.go:

func injectSwiftStorage(conf config.StorageSwift) (*Storage, error) {
	client, err := swift.NewClient(conf)
	if err != nil {
		return nil, err
	}
	gameImage := swift.NewGameImage(client)
	gameVideo := swift.NewGameVideo(client)
	gameFile := swift.NewGameFile(client)
	storage, err := newStorage(gameImage, gameVideo, gameFile)
	if err != nil {
		return nil, err
	}
	return storage, nil
}

func injectLocalStorage(conf config.StorageLocal) (*Storage, error) {
	directoryManager, err := local.NewDirectoryManager(conf)
	if err != nil {
		return nil, err
	}
	gameImage, err := local.NewGameImage(directoryManager)
	if err != nil {
		return nil, err
	}
	gameVideo, err := local.NewGameVideo(directoryManager)
	if err != nil {
		return nil, err
	}
	gameFile, err := local.NewGameFile(directoryManager)
	if err != nil {
		return nil, err
	}
	storage, err := newStorage(gameImage, gameVideo, gameFile)
	if err != nil {
		return nil, err
	}
	return storage, nil
}

// Injectors from wire.go:

func InjectApp() (*App, error) {
	handlerV1 := v1.NewHandlerV1()
	session, err := v1_2.NewSession(handlerV1)
	if err != nil {
		return nil, err
	}
	serviceV1 := v1.NewServiceV1()
	authTraQ := v1.NewAuthTraQ()
	user, err := traq.NewUser(authTraQ)
	if err != nil {
		return nil, err
	}
	cacheRistretto := v1.NewCacheRistretto()
	ristrettoUser, err := ristretto.NewUser(cacheRistretto)
	if err != nil {
		return nil, err
	}
	userUtils := v1_3.NewUserUtils(user, ristrettoUser)
	administratorAuth, err := v1_3.NewAdministratorAuth(serviceV1, userUtils)
	if err != nil {
		return nil, err
	}
	app := v1.NewApp()
	repositoryGorm2 := v1.NewRepositoryGorm2()
	db, err := gorm2.NewDB(app, repositoryGorm2)
	if err != nil {
		return nil, err
	}
	launcherVersion := gorm2.NewLauncherVersion(db)
	launcherUser := gorm2.NewLauncherUser(db)
	launcherSession := gorm2.NewLauncherSession(db)
	launcherAuth := v1_3.NewLauncherAuth(db, launcherVersion, launcherUser, launcherSession)
	game := gorm2.NewGame(db)
	gameManagementRole, err := gorm2.NewGameManagementRole(db)
	if err != nil {
		return nil, err
	}
	gameAuth := v1_3.NewGameAuth(db, game, gameManagementRole, userUtils)
	oidc, err := traq.NewOIDC(authTraQ)
	if err != nil {
		return nil, err
	}
	v1OIDC, err := v1_3.NewOIDC(serviceV1, oidc)
	if err != nil {
		return nil, err
	}
	middleware := v1_2.NewMiddleware(session, administratorAuth, launcherAuth, gameAuth, v1OIDC)
	v1User := v1_3.NewUser(userUtils)
	user2 := v1_2.NewUser(session, v1User)
	gameVersion := gorm2.NewGameVersion(db)
	v1Game := v1_3.NewGame(db, game, gameVersion, gameManagementRole, userUtils)
	game2 := v1_2.NewGame(session, v1Game)
	gameRole := v1_2.NewGameRole(session, gameAuth)
	gameImage, err := gorm2.NewGameImage(db)
	if err != nil {
		return nil, err
	}
	storage := v1.NewStorage()
	storageSwift := v1.NewStorageSwift()
	storageLocal := v1.NewStorageLocal()
	wireStorage, err := storageSwitch(storage, storageSwift, storageLocal)
	if err != nil {
		return nil, err
	}
	storageGameImage := wireStorage.GameImage
	v1GameImage := v1_3.NewGameImage(db, game, gameImage, storageGameImage)
	gameImage2 := v1_2.NewGameImage(v1GameImage)
	gameVideo, err := gorm2.NewGameVideo(db)
	if err != nil {
		return nil, err
	}
	storageGameVideo := wireStorage.GameVideo
	v1GameVideo := v1_3.NewGameVideo(db, game, gameVideo, storageGameVideo)
	gameVideo2 := v1_2.NewGameVideo(v1GameVideo)
	v1GameVersion := v1_3.NewGameVersion(db, game, gameVersion)
	gameVersion2 := v1_2.NewGameVersion(v1GameVersion)
	gameFile, err := gorm2.NewGameFile(db)
	if err != nil {
		return nil, err
	}
	storageGameFile := wireStorage.GameFile
	v1GameFile := v1_3.NewGameFile(db, game, gameVersion, gameFile, storageGameFile)
	gameFile2 := v1_2.NewGameFile(v1GameFile)
	gameURL := gorm2.NewGameURL(db)
	v1GameURL := v1_3.NewGameURL(db, game, gameVersion, gameURL)
	gameURL2 := v1_2.NewGameURL(v1GameURL)
	v1LauncherAuth := v1_2.NewLauncherAuth(launcherAuth)
	v1LauncherVersion := v1_3.NewLauncherVersion(db, launcherVersion, game)
	launcherVersion2 := v1_2.NewLauncherVersion(v1LauncherVersion)
	oAuth2, err := v1_2.NewOAuth2(handlerV1, session, v1OIDC)
	if err != nil {
		return nil, err
	}
	api, err := v1_2.NewAPI(handlerV1, middleware, user2, game2, gameRole, gameImage2, gameVideo2, gameVersion2, gameFile2, gameURL2, v1LauncherAuth, launcherVersion2, oAuth2, session)
	if err != nil {
		return nil, err
	}
	wireApp := newApp(api, db)
	return wireApp, nil
}

// storage.go:

var (
	storageSet = wire.NewSet(wire.FieldsOf(new(*Storage), "GameImage"), wire.FieldsOf(new(*Storage), "GameVideo"), wire.FieldsOf(new(*Storage), "GameFile"), storageSwitch)
)

type Storage struct {
	GameImage storage.GameImage
	GameVideo storage.GameVideo
	GameFile  storage.GameFile
}

func newStorage(
	gameImage storage.GameImage,
	gameVideo storage.GameVideo,
	gameFile storage.GameFile,
) (*Storage, error) {
	return &Storage{
		GameImage: gameImage,
		GameVideo: gameVideo,
		GameFile:  gameFile,
	}, nil
}

func storageSwitch(
	conf config.Storage,
	swiftConf config.StorageSwift,
	localConf config.StorageLocal,
) (*Storage, error) {
	storageType, err := conf.Type()
	if err != nil {
		return nil, fmt.Errorf("failed to get storage type: %w", err)
	}

	switch storageType {
	case config.StorageTypeSwift:
		return injectSwiftStorage(swiftConf)
	case config.StorageTypeLocal:
		return injectLocalStorage(localConf)
	}

	return nil, fmt.Errorf("unknown storage type: %d", storageType)
}

// wire.go:

type App struct {
	*v1_2.API
	repository.DB
}

func newApp(api *v1_2.API, db repository.DB) *App {
	return &App{
		API: api,
		DB:  db,
	}
}

func (app *App) Run() error {
	defer app.DB.Close()

	return app.API.Start()
}
