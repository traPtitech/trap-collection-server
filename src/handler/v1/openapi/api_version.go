/*
 * traPCollection API
 *
 * traPCollectionのAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"errors"
	"fmt"
	"net/http"

	echo "github.com/labstack/echo/v4"
)

type VersionApi interface {
	GetCheckList(c echo.Context, operatingSystem string) ([]*CheckItem, error)
	GetVersion(c echo.Context, launcherVersionID string) (*VersionDetails, error)
	GetVersions(c echo.Context) ([]*Version, error)
	PostGameToVersion(c echo.Context, launcherVersionID string, gameIDs *GameIDs) (*VersionDetails, error)
	PostVersion(c echo.Context, newVersion *NewVersion) (*VersionMeta, error)
}

// GetCheckListHandler - ブラウザゲーム以外のゲームのID、MD5、ゲームの種類、更新日の一覧
func GetCheckListHandler(VersionApi VersionApi) echo.HandlerFunc {
	return func(c echo.Context) error {
		var err error
		operatingSystem := c.QueryParam("operatingSystem")
		var res []*CheckItem
		res, err = VersionApi.GetCheckList(c, operatingSystem)
		if err != nil {
			var httpError *echo.HTTPError
			if errors.As(err, &httpError) {
				return httpError
			}

			return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w", err))
		}
		return c.JSON(http.StatusOK, res)
	}
}

// GetVersionHandler - バージョンの詳細情報の取得
func GetVersionHandler(VersionApi VersionApi) echo.HandlerFunc {
	return func(c echo.Context) error {
		var err error
		launcherVersionID := c.Param("launcherVersionID")
		var res *VersionDetails
		res, err = VersionApi.GetVersion(c, launcherVersionID)
		if err != nil {
			var httpError *echo.HTTPError
			if errors.As(err, &httpError) {
				return httpError
			}

			return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w", err))
		}
		return c.JSON(http.StatusOK, res)
	}
}

// GetVersionsHandler - バージョン一覧の取得
func GetVersionsHandler(VersionApi VersionApi) echo.HandlerFunc {
	return func(c echo.Context) error {
		var err error
		var res []*Version
		res, err = VersionApi.GetVersions(c)
		if err != nil {
			var httpError *echo.HTTPError
			if errors.As(err, &httpError) {
				return httpError
			}

			return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w", err))
		}
		return c.JSON(http.StatusOK, res)
	}
}

// PostGameToVersionHandler - バージョンへのゲームの追加
func PostGameToVersionHandler(VersionApi VersionApi) echo.HandlerFunc {
	return func(c echo.Context) error {
		var err error
		launcherVersionID := c.Param("launcherVersionID")
		var gameIDs GameIDs
		err = c.Bind(&gameIDs)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w", err))
		}
		var res *VersionDetails
		res, err = VersionApi.PostGameToVersion(c, launcherVersionID, &gameIDs)
		if err != nil {
			var httpError *echo.HTTPError
			if errors.As(err, &httpError) {
				return httpError
			}

			return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w", err))
		}
		return c.JSON(http.StatusOK, res)
	}
}

// PostVersionHandler - 新しいバージョンの作成
func PostVersionHandler(VersionApi VersionApi) echo.HandlerFunc {
	return func(c echo.Context) error {
		var err error
		var newVersion NewVersion
		err = c.Bind(&newVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w", err))
		}
		var res *VersionMeta
		res, err = VersionApi.PostVersion(c, &newVersion)
		if err != nil {
			var httpError *echo.HTTPError
			if errors.As(err, &httpError) {
				return httpError
			}

			return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w", err))
		}
		return c.JSON(http.StatusOK, res)
	}
}
