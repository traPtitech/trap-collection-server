/*
 * traPCollection API
 *
 * traPCollectionのAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
  "fmt"
  "errors"

	echo "github.com/labstack/echo/v4"
)

type GameApi interface{
  DeleteGames(c echo.Context, gameID string) ( error)
  GetGame(c echo.Context, gameID string) (*Game, error)
  GetGameFile(c echo.Context, gameID string, operatingSystem string) (ioReadCloser, error)
  GetGameURL(c echo.Context, gameID string) (string, error)
  GetGameVersion(c echo.Context, gameID string) ([]*GameVersion, error)
  GetGames(c echo.Context, all string, ) ([]*Game, error)
  GetImage(c echo.Context, gameID string) (error)
  GetMaintainer(c echo.Context, gameID string, ) ([]*Maintainer, error)
  GetVideo(c echo.Context, gameID string) ( error)
  PostFile(c echo.Context, gameID string, fileType string, entryPoint string, file multipartFile) (*GameFile, error)
  PostGame(c echo.Context, newGame *NewGame, ) (*GameInfo, error)
  PostGameVersion(c echo.Context, gameID string, newGameVersion *NewGameVersion) (*GameVersion, error)
  PostImage(c echo.Context, gameID string, file multipartFile) ( error)
  PostMaintainer(c echo.Context, gameID string, maintainers *Maintainers, ) ( error)
  PostURL(c echo.Context, gameID string, newGameUrl *NewGameUrl) (*GameUrl, error)
  PostVideo(c echo.Context, gameID string, file multipartFile) ( error)
  PutGame(c echo.Context, gameID string, newGame *NewGame) (*GameInfo, error)
}

// DeleteGamesHandler - ゲームの削除
func DeleteGamesHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    
    err = GameApi.DeleteGames(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.NoContent(http.StatusOK)
  }
}

// GetGameHandler - ゲーム情報の取得
func GetGameHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var res *Game
    res, err = GameApi.GetGame(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// GetGameFileHandler - ゲームの最新バージョンのファイルの取得
func GetGameFileHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    operatingSystem := c.QueryParam("operatingSystem")
    gameID := c.Param("gameID")
    var res ioReadCloser
    res, err = GameApi.GetGameFile(c, gameID, operatingSystem)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    defer res.Close()
    return c.Stream(http.StatusOK, "application/octet-stream", res)
  }
}

// GetGameURLHandler - ゲームの最新バージョンのURLの取得
func GetGameURLHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var res string
    res, err = GameApi.GetGameURL(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// GetGameVersionHandler - ゲームのバージョン一覧の取得
func GetGameVersionHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var res []*GameVersion
    res, err = GameApi.GetGameVersion(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// GetGamesHandler - ゲーム一覧の取得
func GetGamesHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    all := c.QueryParam("all")
    var res []*Game
    res, err = GameApi.GetGames(c, all, )
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// GetImageHandler - ゲームの画像の取得
func GetImageHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var res ioReadCloser
    err = GameApi.GetImage(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    defer res.Close()
    return c.Stream(http.StatusOK, "image/jpeg", res)
  }
}

// GetMaintainerHandler - ゲームの管理者の取得
func GetMaintainerHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var res []*Maintainer
    res, err = GameApi.GetMaintainer(c, gameID, )
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// GetVideoHandler - ゲームの動画の取得
func GetVideoHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    
    err = GameApi.GetVideo(c, gameID)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.NoContent(http.StatusOK)
  }
}

// PostFileHandler - ゲームの最新バージョンへのファイルの追加
func PostFileHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    fileType := c.FormValue("fileType")
    entryPoint := c.FormValue("entryPoint")
    _file,err := c.FormFile("file")
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to form file:%w",err))
    }
    file,err := _file.Open()
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to open file:%w",err))
    }
    defer file.Close()
    var res *GameFile
    res, err = GameApi.PostFile(c, gameID, fileType, entryPoint, file)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// PostGameHandler - ゲームの追加
func PostGameHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    var newGame NewGame
    err = c.Bind(&newGame)
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w",err))
    }
    var res *GameInfo
    res, err = GameApi.PostGame(c, &newGame, )
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// PostGameVersionHandler - ゲームのバージョンの作成
func PostGameVersionHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var newGameVersion NewGameVersion
    err = c.Bind(&newGameVersion)
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w",err))
    }
    var res *GameVersion
    res, err = GameApi.PostGameVersion(c, gameID, &newGameVersion)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// PostImageHandler - ゲームの画像の変更
func PostImageHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    _file,err := c.FormFile("file")
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to form file:%w",err))
    }
    file,err := _file.Open()
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to open file:%w",err))
    }
    defer file.Close()
    
    err = GameApi.PostImage(c, gameID, file)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.NoContent(http.StatusOK)
  }
}

// PostMaintainerHandler - ゲームのバージョン更新権限保持者の追加
func PostMaintainerHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var maintainers Maintainers
    err = c.Bind(&maintainers)
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w",err))
    }
    
    err = GameApi.PostMaintainer(c, gameID, &maintainers, )
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.NoContent(http.StatusOK)
  }
}

// PostURLHandler - ゲームの最新バージョンへのURLの追加
func PostURLHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var newGameUrl NewGameUrl
    err = c.Bind(&newGameUrl)
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w",err))
    }
    var res *GameUrl
    res, err = GameApi.PostURL(c, gameID, &newGameUrl)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}

// PostVideoHandler - ゲームの動画の変更
func PostVideoHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    _file,err := c.FormFile("file")
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to form file:%w",err))
    }
    file,err := _file.Open()
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to open file:%w",err))
    }
    defer file.Close()
    
    err = GameApi.PostVideo(c, gameID, file)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.NoContent(http.StatusOK)
  }
}

// PutGameHandler - ゲームの情報の修正
func PutGameHandler(GameApi GameApi) echo.HandlerFunc {
  return func(c echo.Context) error {
    var err error
    gameID := c.Param("gameID")
    var newGame NewGame
    err = c.Bind(&newGame)
    if err != nil {
      return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("failed to bind request body:%w",err))
    }
    var res *GameInfo
    res, err = GameApi.PutGame(c, gameID, &newGame)
    if err != nil {
      var httpError *echo.HTTPError
      if errors.As(err, &httpError) {
        return httpError
      }

      return echo.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("failed to make response:%w",err))
    }
    return c.JSON(http.StatusOK, res)
  }
}
