// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AdminAuthScopes          = "AdminAuth.Scopes"
	EditionAuthScopes        = "EditionAuth.Scopes"
	EditionIDAuthScopes      = "EditionIDAuth.Scopes"
	GameMaintainerAuthScopes = "GameMaintainerAuth.Scopes"
	GameOwnerAuthScopes      = "GameOwnerAuth.Scopes"
	TrapMemberAuthScopes     = "TrapMemberAuth.Scopes"
)

// Defines values for GameFileType.
const (
	Darwin GameFileType = "darwin"
	Jar    GameFileType = "jar"
	Win32  GameFileType = "win32"
)

// Defines values for GameImageMime.
const (
	Imagegif  GameImageMime = "image/gif"
	Imagejpeg GameImageMime = "image/jpeg"
	Imagepng  GameImageMime = "image/png"
)

// Defines values for GameRoleType.
const (
	Maintainer GameRoleType = "maintainer"
	Owner      GameRoleType = "owner"
)

// Defines values for GameVideoMime.
const (
	Videomp4 GameVideoMime = "video/mp4"
)

// Defines values for ProductKeyStatus.
const (
	Active  ProductKeyStatus = "active"
	Revoked ProductKeyStatus = "revoked"
)

// Defines values for SeatStatus.
const (
	Empty SeatStatus = "empty"
	InUse SeatStatus = "in-use"
)

// Defines values for GetGamesParamsSort.
const (
	CreatedAt     GetGamesParamsSort = "createdAt"
	LatestVersion GetGamesParamsSort = "latestVersion"
)

// Edition エディションです。
// questionnaireは工大祭などのアンケートが必要な際のみ存在します。
type Edition struct {
	// CreatedAt エディションが作成された時刻です。
	CreatedAt EditionCreatedAt `json:"createdAt"`

	// Id エディションのIDです。
	Id EditionID `json:"id"`

	// Name エディション名です。
	Name EditionName `json:"name"`

	// Questionnaire エディションのアンケートのURLです。
	Questionnaire *EditionQuestionnaireURL `json:"questionnaire,omitempty"`
}

// EditionAccessToken defines model for EditionAccessToken.
type EditionAccessToken struct {
	// AccessToken アクセストークンです。
	// 暗号的にランダムな英数字36文字です。
	AccessToken EditionAccessTokenValue `json:"accessToken"`

	// ExpiresAt アクセストークンの有効期限です。
	ExpiresAt EditionAccessTokenExpiresAt `json:"expiresAt"`
}

// EditionAccessTokenExpiresAt アクセストークンの有効期限です。
type EditionAccessTokenExpiresAt = time.Time

// EditionAccessTokenValue アクセストークンです。
// 暗号的にランダムな英数字36文字です。
type EditionAccessTokenValue = string

// EditionAuthorizeRequest ランチャーのエディション情報取得認可のリクエストです。
type EditionAuthorizeRequest struct {
	// Key プロダクトキーの値です。
	// 暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
	Key ProductKeyValue `json:"key"`
}

// EditionCreatedAt エディションが作成された時刻です。
type EditionCreatedAt = time.Time

// EditionGameResponse defines model for EditionGameResponse.
type EditionGameResponse struct {
	// CreatedAt ゲームがtraP Collectionに追加された時刻です。
	CreatedAt GameCreatedAt `json:"createdAt"`

	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`

	// Id ゲームのIDです。
	Id GameID `json:"id"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`

	// Version ゲームのバージョンです。
	// url、filesはゲームの種類に応じていずれかが存在します。
	Version GameVersion `json:"version"`
}

// EditionID エディションのIDです。
type EditionID = openapi_types.UUID

// EditionName エディション名です。
type EditionName = string

// EditionQuestionnaireURL エディションのアンケートのURLです。
type EditionQuestionnaireURL = string

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Game ゲームの情報です。
type Game struct {
	// CreatedAt ゲームがtraP Collectionに追加された時刻です。
	CreatedAt GameCreatedAt `json:"createdAt"`

	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`

	// Genres ジャンルの名前です。ジャンルが無い場合はこのフィールドはありません。
	Genres []GameGenreName `json:"genres"`

	// Id ゲームのIDです。
	Id GameID `json:"id"`

	// Maintainers ゲームのmaintainerの一覧です。
	// maintainerがいない場合、このフィールドは存在しません。
	Maintainers *[]UserName `json:"maintainers,omitempty"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`

	// Owners ゲームのownerの一覧です。
	Owners []UserName `json:"owners"`
}

// GameCreatedAt ゲームがtraP Collectionに追加された時刻です。
type GameCreatedAt = time.Time

// GameDescription ゲームの説明です。
// ランチャーでも表示されます。
type GameDescription = string

// GameFile ゲームのファイルのメタ情報です。
type GameFile struct {
	// CreatedAt ゲームファイルが作成された時刻です。
	CreatedAt GameFileCreatedAt `json:"createdAt"`

	// EntryPoint ゲームファイルの解凍後の実行ファイルのパスです。
	EntryPoint GameFileEntryPoint `json:"entryPoint"`

	// Id ゲームファイルのIDです。
	Id GameFileID `json:"id"`

	// Md5 ゲームファイルのmd5ハッシュ値です。
	Md5 GameFileMd5 `json:"md5"`

	// Type ゲームファイルのタイプです。
	// jarはJavaで起動しWindows、OSXの両方で実行できるもの、
	// windowsはWindows用の実行ファイル、
	// macはOSX用の実行ファイルです。
	Type GameFileType `json:"type"`
}

// GameFileContent ゲームの実行ファイルやデータをzipしたバイナリです。
type GameFileContent = openapi_types.File

// GameFileCreatedAt ゲームファイルが作成された時刻です。
type GameFileCreatedAt = time.Time

// GameFileEntryPoint ゲームファイルの解凍後の実行ファイルのパスです。
type GameFileEntryPoint = string

// GameFileID ゲームファイルのIDです。
type GameFileID = openapi_types.UUID

// GameFileMd5 ゲームファイルのmd5ハッシュ値です。
type GameFileMd5 = string

// GameFileType ゲームファイルのタイプです。
// jarはJavaで起動しWindows、OSXの両方で実行できるもの、
// windowsはWindows用の実行ファイル、
// macはOSX用の実行ファイルです。
type GameFileType string

// GameGenre defines model for GameGenre.
type GameGenre struct {
	// CreatedAt ジャンルが作成された日時です
	CreatedAt GameGenreCreatedAt `json:"createdAt"`

	// Genre ジャンルの名前です。32文字以下です。
	Genre GameGenreName `json:"genre"`

	// Id ジャンルのID(UUID)です。
	Id GameGenreID `json:"id"`

	// Num そのジャンルが含まれるゲームの数です。
	Num int `json:"num"`
}

// GameGenreCreatedAt ジャンルが作成された日時です
type GameGenreCreatedAt = time.Time

// GameGenreID ジャンルのID(UUID)です。
type GameGenreID = openapi_types.UUID

// GameGenreName ジャンルの名前です。32文字以下です。
type GameGenreName = string

// GameID ゲームのIDです。
type GameID = openapi_types.UUID

// GameImage ゲームの画像のメタ情報です。
type GameImage struct {
	// CreatedAt ゲーム画像の作成時刻です。
	CreatedAt GameImageCreatedAt `json:"createdAt"`

	// Id ゲーム画像のIDです。
	Id GameImageID `json:"id"`

	// Mime ゲーム画像のmimeです。
	Mime GameImageMime `json:"mime"`
}

// GameImageContent ゲーム画像のバイナリです。
type GameImageContent = openapi_types.File

// GameImageCreatedAt ゲーム画像の作成時刻です。
type GameImageCreatedAt = time.Time

// GameImageID ゲーム画像のIDです。
type GameImageID = openapi_types.UUID

// GameImageMime ゲーム画像のmimeです。
type GameImageMime string

// GameInfo ゲームの情報です。
type GameInfo struct {
	// CreatedAt ゲームがtraP Collectionに追加された時刻です。
	CreatedAt GameCreatedAt `json:"createdAt"`

	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`

	// Id ゲームのIDです。
	Id GameID `json:"id"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`
}

// GameInfoWithGenres ゲームとそのジャンルの情報です。
type GameInfoWithGenres struct {
	// CreatedAt ゲームがtraP Collectionに追加された時刻です。
	CreatedAt GameCreatedAt `json:"createdAt"`

	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`
	Genres      []GameGenreID   `json:"genres"`

	// Id ゲームのIDです。
	Id GameID `json:"id"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`
}

// GameName ゲームの名前です。
type GameName = string

// GameRoleRequest ゲームのロールを指定するリクエストです。
type GameRoleRequest struct {
	// Id ユーザーのIDです。
	// traQのユーザーのUUIDと対応します。
	Id UserID `json:"id"`

	// Type ゲームの管理権限の種類です。
	// ownerはゲームの所有者で、ゲーム情報の変更や管理者の変更ができます。
	// maintainerはゲームのメンテナーで、ゲーム情報の変更のみできます。
	Type *GameRoleType `json:"type,omitempty"`
}

// GameRoleType ゲームの管理権限の種類です。
// ownerはゲームの所有者で、ゲーム情報の変更や管理者の変更ができます。
// maintainerはゲームのメンテナーで、ゲーム情報の変更のみできます。
type GameRoleType string

// GameURL ゲームのURLの値です。
type GameURL = string

// GameVersion ゲームのバージョンです。
// url、filesはゲームの種類に応じていずれかが存在します。
type GameVersion struct {
	// CreatedAt ゲームのバージョンが作成された時刻です。
	CreatedAt GameVersionCreatedAt `json:"createdAt"`

	// Description ゲームのバージョンの説明です。
	// 主にゲームの開発者向けの情報で、ランチャーでは表示されません。
	Description GameVersionDescription `json:"description"`

	// Files ゲームバージョンに紐づいたファイルの情報です。
	Files *GameVersionFiles `json:"files,omitempty"`

	// Id ゲームのバージョンのIDです。
	Id GameVersionID `json:"id"`

	// ImageID ゲーム画像のIDです。
	ImageID GameImageID `json:"imageID"`

	// Name ゲームのバージョン名です。
	// セマンティックバージョニングに沿った文字列が許容されます。
	Name GameVersionName `json:"name"`

	// Url ゲームのURLの値です。
	Url *GameURL `json:"url,omitempty"`

	// VideoID ゲーム紹介動画のIDです。
	VideoID GameVideoID `json:"videoID"`
}

// GameVersionCreatedAt ゲームのバージョンが作成された時刻です。
type GameVersionCreatedAt = time.Time

// GameVersionDescription ゲームのバージョンの説明です。
// 主にゲームの開発者向けの情報で、ランチャーでは表示されません。
type GameVersionDescription = string

// GameVersionFiles ゲームバージョンに紐づいたファイルの情報です。
type GameVersionFiles struct {
	// Darwin ゲームファイルのIDです。
	Darwin *GameFileID `json:"darwin,omitempty"`

	// Jar ゲームファイルのIDです。
	Jar *GameFileID `json:"jar,omitempty"`

	// Win32 ゲームファイルのIDです。
	Win32 *GameFileID `json:"win32,omitempty"`
}

// GameVersionID ゲームのバージョンのIDです。
type GameVersionID = openapi_types.UUID

// GameVersionName ゲームのバージョン名です。
// セマンティックバージョニングに沿った文字列が許容されます。
type GameVersionName = string

// GameVideo ゲームの動画のメタ情報です。
type GameVideo struct {
	// CreatedAt ゲーム紹介動画の作成時刻です。
	CreatedAt GameVideoCreatedAt `json:"createdAt"`

	// Id ゲーム紹介動画のIDです。
	Id GameVideoID `json:"id"`

	// Mime ゲーム紹介動画のmimeです。
	Mime GameVideoMime `json:"mime"`
}

// GameVideoContent ゲーム紹介動画のバイナリです。
type GameVideoContent = openapi_types.File

// GameVideoCreatedAt ゲーム紹介動画の作成時刻です。
type GameVideoCreatedAt = time.Time

// GameVideoID ゲーム紹介動画のIDです。
type GameVideoID = openapi_types.UUID

// GameVideoMime ゲーム紹介動画のmimeです。
type GameVideoMime string

// GetGameVersionsResponse ゲームバージョンの一覧を取得します。
// ページングのために、limit、offsetを適用する前のゲームバージョンの数もnumで返しています。
type GetGameVersionsResponse struct {
	// Num limit、offsetが適用される前のゲームバージョンの数です。
	Num int `json:"num"`

	// Versions limit、offsetが適用された後のゲームバージョンの一覧です。
	Versions []GameVersion `json:"versions"`
}

// GetGamesResponse ゲームの一覧を取得します。
// ページングのために、limit、offsetを適用する前のゲームの数をnumで返しています。
type GetGamesResponse struct {
	// Games limit、offsetが適用された後のゲームの一覧です。
	Games []GameInfoWithGenres `json:"games"`

	// Num limit、offsetが適用される前のゲームの数です。
	Num int `json:"num"`
}

// NewEdition エディションを新しく作成する際に必要な情報です。
// questionnaireは工大祭などのアンケートが必要な際のみ存在します。
type NewEdition struct {
	GameVersions []GameVersionID `json:"gameVersions"`

	// Name エディション名です。
	Name EditionName `json:"name"`

	// Questionnaire エディションのアンケートのURLです。
	Questionnaire *EditionQuestionnaireURL `json:"questionnaire,omitempty"`
}

// NewGame ゲームを新しく作成する際に必要な情報です。
type NewGame struct {
	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`

	// Genres ゲームのジャンルの名前の配列です。ジャンルが無い場合はこのフィールドは省略されます。
	Genres *[]GameGenreName `json:"genres,omitempty"`

	// Maintainers ゲームのmaintainerの一覧です。
	// 指定されない場合、空配列として扱われます。
	// ゲームの作成を実行したユーザーを含むownerと重複するユーザーが存在した場合、
	// 400エラーとなります。
	Maintainers *[]UserName `json:"maintainers,omitempty"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`

	// Owners ゲームのownerの一覧です。
	// 指定されない場合、空配列として扱われます。
	// ゲームの作成を実行したユーザーは、このリストに含まれていなくてもownerとなります。
	// また、このリストにゲームの作成を実行したユーザーが含まれていた場合、
	// 400エラーになります。
	Owners *[]UserName `json:"owners,omitempty"`
}

// NewGameFile ゲームのファイルを新しく作成する際に必要な情報です。
type NewGameFile struct {
	// Content ゲームの実行ファイルやデータをzipしたバイナリです。
	Content GameFileContent `json:"content"`

	// EntryPoint ゲームファイルの解凍後の実行ファイルのパスです。
	EntryPoint GameFileEntryPoint `json:"entryPoint"`
	Type       string             `json:"type"`
}

// NewGameImage ゲームの画像を新しく作成する際に必要な情報です。
type NewGameImage struct {
	// Content ゲーム画像のバイナリです。
	Content GameImageContent `json:"content"`
}

// NewGameVersion 新しいゲームのバージョンの作成に必要な情報です。
// url、filesはゲームの種類に応じていずれかが存在します。
type NewGameVersion struct {
	// Description ゲームのバージョンの説明です。
	// 主にゲームの開発者向けの情報で、ランチャーでは表示されません。
	Description GameVersionDescription `json:"description"`

	// Files ゲームバージョンに紐づいたファイルの情報です。
	Files *GameVersionFiles `json:"files,omitempty"`

	// ImageID ゲーム画像のIDです。
	ImageID GameImageID `json:"imageID"`

	// Name ゲームのバージョン名です。
	// セマンティックバージョニングに沿った文字列が許容されます。
	Name GameVersionName `json:"name"`

	// Url ゲームのURLの値です。
	Url *GameURL `json:"url,omitempty"`

	// VideoID ゲーム紹介動画のIDです。
	VideoID GameVideoID `json:"videoID"`
}

// NewGameVideo ゲームの動画を新しく作成する際に必要な情報です。
type NewGameVideo struct {
	// Content ゲーム紹介動画のバイナリです。
	Content GameVideoContent `json:"content"`
}

// PatchEdition エディションの情報を修正する際に必要な情報です。
type PatchEdition struct {
	// Name エディション名です。
	Name EditionName `json:"name"`

	// Questionnaire エディションのアンケートのURLです。
	Questionnaire *EditionQuestionnaireURL `json:"questionnaire,omitempty"`
}

// PatchEditionGameRequest エディションのゲームを変更するためのリクエストです。
type PatchEditionGameRequest struct {
	GameVersionIDs []GameVersionID `json:"gameVersionIDs"`
}

// PatchGame ゲームの情報を修正する際に必要な情報です。
type PatchGame struct {
	// Description ゲームの説明です。
	// ランチャーでも表示されます。
	Description GameDescription `json:"description"`

	// Name ゲームの名前です。
	Name GameName `json:"name"`
}

// PatchSeatStatusRequest 席の着席状態を変更するためのリクエストです。
type PatchSeatStatusRequest struct {
	// Status 席の状態です。
	// in-useは使用中、emptyは空席です。
	Status SeatStatus `json:"status"`
}

// PostSeatRequest 席数を変更するためのリクエストです。
type PostSeatRequest struct {
	// Num 席数です。
	Num int `json:"num"`
}

// ProductKey defines model for ProductKey.
type ProductKey struct {
	// CreatedAt プロダクトキーが作成された時刻です。
	CreatedAt ProductKeyCreatedAt `json:"createdAt"`

	// Id プロダクトキーのIDです。
	Id ProductKeyID `json:"id"`

	// Key プロダクトキーの値です。
	// 暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
	Key    ProductKeyValue  `json:"key"`
	Status ProductKeyStatus `json:"status"`
}

// ProductKeyCreatedAt プロダクトキーが作成された時刻です。
type ProductKeyCreatedAt = time.Time

// ProductKeyID プロダクトキーのIDです。
type ProductKeyID = openapi_types.UUID

// ProductKeyStatus defines model for ProductKeyStatus.
type ProductKeyStatus string

// ProductKeyValue プロダクトキーの値です。
// 暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
type ProductKeyValue = string

// Seat 席の情報です。
type Seat struct {
	// Id 席のIDです。
	Id SeatID `json:"id"`

	// Status 席の状態です。
	// in-useは使用中、emptyは空席です。
	Status SeatStatus `json:"status"`
}

// SeatID 席のIDです。
type SeatID = int

// SeatStatus 席の状態です。
// in-useは使用中、emptyは空席です。
type SeatStatus string

// User ユーザー
type User struct {
	// Id ユーザーのIDです。
	// traQのユーザーのUUIDと対応します。
	Id UserID `json:"id"`

	// Name ユーザー名です。
	// traQのユーザーのUUIDでないmazreanなどのIDと対応します。
	Name UserName `json:"name"`
}

// UserID ユーザーのIDです。
// traQのユーザーのUUIDと対応します。
type UserID = openapi_types.UUID

// UserName ユーザー名です。
// traQのユーザーのUUIDでないmazreanなどのIDと対応します。
type UserName = string

// UserRequest ユーザーを指定するリクエストです。
type UserRequest struct {
	// Id ユーザーのIDです。
	// traQのユーザーのUUIDと対応します。
	Id UserID `json:"id"`
}

// AuthorizationCodeInQuery defines model for authorizationCodeInQuery.
type AuthorizationCodeInQuery = string

// EditionIDInPath defines model for editionIDInPath.
type EditionIDInPath = openapi_types.UUID

// GameFileIDInPath ゲームファイルのIDです。
type GameFileIDInPath = GameFileID

// GameGenreIDInPath defines model for gameGenreIDInPath.
type GameGenreIDInPath = openapi_types.UUID

// GameIDInPath ゲームのIDです。
type GameIDInPath = GameID

// GameImageIDInPath ゲーム画像のIDです。
type GameImageIDInPath = GameImageID

// GameVideoIDInPath ゲーム紹介動画のIDです。
type GameVideoIDInPath = GameVideoID

// ProductKeyIDInPath defines model for productKeyIDInPath.
type ProductKeyIDInPath = openapi_types.UUID

// ProductKeyNumInQuery defines model for productKeyNumInQuery.
type ProductKeyNumInQuery = int

// ProductKeyStatusInQuery defines model for productKeyStatusInQuery.
type ProductKeyStatusInQuery = ProductKeyStatus

// SeatIDInPath 席のIDです。
type SeatIDInPath = SeatID

// UserIDInPath ユーザーのIDです。
// traQのユーザーのUUIDと対応します。
type UserIDInPath = UserID

// AdminForbidden defines model for AdminForbidden.
type AdminForbidden = Error

// EditionForbidden defines model for EditionForbidden.
type EditionForbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// TraPUnauthorized defines model for TraPUnauthorized.
type TraPUnauthorized = Error

// GetProductKeysParams defines parameters for GetProductKeys.
type GetProductKeysParams struct {
	// Status プロダクトキーのステータスを示すクエリパラメータです。
	// 指定がない場合は全てのステータスのプロダクトキーが返されます。
	Status *ProductKeyStatusInQuery `form:"status,omitempty" json:"status,omitempty"`
}

// PostProductKeyParams defines parameters for PostProductKey.
type PostProductKeyParams struct {
	// Num 生成するプロダクトキーの数を示すクエリパラメータです。
	Num ProductKeyNumInQuery `form:"num" json:"num"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	// All trueを指定すると、全てのゲーム、
	// falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。
	// デフォルトはtrueです。
	// ログインしている部員以外がfalseでリクエストを送った場合はtrueとして扱われます。
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// Limit 取得するゲームの上限数を指定します。
	// 指定なしの場合は30です。
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 取得するゲームの開始位置を指定します。
	// 指定なしの場合は0となります。
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Genre 取得するゲームのジャンルを指定します。指定なしの場合は、ジャンルによる絞り込みを行いません。また、コンマ区切りで複数指定することができ、複数指定した場合はそれらすべてのジャンルに当てはまるゲームを返します。
	Genre *string `form:"genre,omitempty" json:"genre,omitempty"`

	// Name ゲームの名前を指定すると部分一致するゲームを返します。指定なしの場合は名前による絞り込みを行いません。
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Sort 取得するゲームの並び順を指定します。指定なしの場合は、各ゲームの最新のバージョンが新しい順に取得します。
	Sort *GetGamesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetGamesParamsSort defines parameters for GetGames.
type GetGamesParamsSort string

// PutGameGenresJSONBody defines parameters for PutGameGenres.
type PutGameGenresJSONBody struct {
	Genres *[]GameGenreID `json:"genres,omitempty"`
}

// GetGameVersionParams defines parameters for GetGameVersion.
type GetGameVersionParams struct {
	// Limit 取得するゲームバージョンの上限数を指定します。
	// 指定なしの場合は制限なしです。
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset 取得するゲームバージョンの開始位置を指定します。
	// 指定なしの場合は0となります。
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchGameGenreJSONBody defines parameters for PatchGameGenre.
type PatchGameGenreJSONBody struct {
	// Genre ジャンルの名前です。32文字以下です。
	Genre GameGenreName `json:"genre"`
}

// GetCallbackParams defines parameters for GetCallback.
type GetCallbackParams struct {
	// Code OAuth 2.0のAuthorization Codeです。
	Code AuthorizationCodeInQuery `form:"code" json:"code"`
}

// PostAdminJSONRequestBody defines body for PostAdmin for application/json ContentType.
type PostAdminJSONRequestBody = UserRequest

// PostEditionJSONRequestBody defines body for PostEdition for application/json ContentType.
type PostEditionJSONRequestBody = NewEdition

// PostEditionAuthorizeJSONRequestBody defines body for PostEditionAuthorize for application/json ContentType.
type PostEditionAuthorizeJSONRequestBody = EditionAuthorizeRequest

// PatchEditionJSONRequestBody defines body for PatchEdition for application/json ContentType.
type PatchEditionJSONRequestBody = PatchEdition

// PostEditionGameJSONRequestBody defines body for PostEditionGame for application/json ContentType.
type PostEditionGameJSONRequestBody = PatchEditionGameRequest

// PostGameJSONRequestBody defines body for PostGame for application/json ContentType.
type PostGameJSONRequestBody = NewGame

// PatchGameJSONRequestBody defines body for PatchGame for application/json ContentType.
type PatchGameJSONRequestBody = PatchGame

// PostGameFileMultipartRequestBody defines body for PostGameFile for multipart/form-data ContentType.
type PostGameFileMultipartRequestBody = NewGameFile

// PutGameGenresJSONRequestBody defines body for PutGameGenres for application/json ContentType.
type PutGameGenresJSONRequestBody PutGameGenresJSONBody

// PostGameImageMultipartRequestBody defines body for PostGameImage for multipart/form-data ContentType.
type PostGameImageMultipartRequestBody = NewGameImage

// PatchGameRoleJSONRequestBody defines body for PatchGameRole for application/json ContentType.
type PatchGameRoleJSONRequestBody = GameRoleRequest

// PostGameVersionJSONRequestBody defines body for PostGameVersion for application/json ContentType.
type PostGameVersionJSONRequestBody = NewGameVersion

// PostGameVideoMultipartRequestBody defines body for PostGameVideo for multipart/form-data ContentType.
type PostGameVideoMultipartRequestBody = NewGameVideo

// PatchGameGenreJSONRequestBody defines body for PatchGameGenre for application/json ContentType.
type PatchGameGenreJSONRequestBody PatchGameGenreJSONBody

// PostSeatJSONRequestBody defines body for PostSeat for application/json ContentType.
type PostSeatJSONRequestBody = PostSeatRequest

// PatchSeatStatusJSONRequestBody defines body for PatchSeatStatus for application/json ContentType.
type PatchSeatStatusJSONRequestBody = PatchSeatStatusRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// traPの管理者一覧取得
	// (GET /admins)
	GetAdmins(ctx echo.Context) error
	// traP Collection全体の管理者追加
	// (POST /admins)
	PostAdmin(ctx echo.Context) error
	// traP Collection全体の管理者削除
	// (DELETE /admins/{userID})
	DeleteAdmin(ctx echo.Context, userID UserIDInPath) error
	// エディション一覧の取得
	// (GET /editions)
	GetEditions(ctx echo.Context) error
	// エディションの作成
	// (POST /editions)
	PostEdition(ctx echo.Context) error
	// ランチャーの認可リクエスト
	// (POST /editions/authorize)
	PostEditionAuthorize(ctx echo.Context) error
	// エディション情報の取得
	// (GET /editions/info)
	GetEditionInfo(ctx echo.Context) error
	// エディションの削除
	// (DELETE /editions/{editionID})
	DeleteEdition(ctx echo.Context, editionID EditionIDInPath) error
	// エディション情報の取得
	// (GET /editions/{editionID})
	GetEdition(ctx echo.Context, editionID EditionIDInPath) error
	// エディション情報の変更
	// (PATCH /editions/{editionID})
	PatchEdition(ctx echo.Context, editionID EditionIDInPath) error
	// エディションに紐づくゲームの一覧の取得
	// (GET /editions/{editionID}/games)
	GetEditionGames(ctx echo.Context, editionID EditionIDInPath) error
	// エディションのゲームの変更
	// (PATCH /editions/{editionID}/games)
	PostEditionGame(ctx echo.Context, editionID EditionIDInPath) error
	// プロダクトキーの一覧の取得
	// (GET /editions/{editionID}/keys)
	GetProductKeys(ctx echo.Context, editionID EditionIDInPath, params GetProductKeysParams) error
	// プロダクトキーの生成
	// (POST /editions/{editionID}/keys)
	PostProductKey(ctx echo.Context, editionID EditionIDInPath, params PostProductKeyParams) error
	// プロダクトキーの再有効化
	// (POST /editions/{editionID}/keys/{productKeyID}/activate)
	PostActivateProductKey(ctx echo.Context, editionID EditionIDInPath, productKeyID ProductKeyIDInPath) error
	// プロダクトキーの失効
	// (POST /editions/{editionID}/keys/{productKeyID}/revoke)
	PostRevokeProductKey(ctx echo.Context, editionID EditionIDInPath, productKeyID ProductKeyIDInPath) error
	// ゲーム一覧の取得
	// (GET /games)
	GetGames(ctx echo.Context, params GetGamesParams) error
	// ゲームの追加
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲームの削除
	// (DELETE /games/{gameID})
	DeleteGame(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム情報の取得
	// (GET /games/{gameID})
	GetGame(ctx echo.Context, gameID GameIDInPath) error
	// ゲームの情報の変更
	// (PATCH /games/{gameID})
	PatchGame(ctx echo.Context, gameID GameIDInPath) error
	// ゲームファイル一覧の取得
	// (GET /games/{gameID}/files)
	GetGameFiles(ctx echo.Context, gameID GameIDInPath) error
	// ゲームファイルの作成
	// (POST /games/{gameID}/files)
	PostGameFile(ctx echo.Context, gameID GameIDInPath) error
	// ゲームファイルのバイナリの取得
	// (GET /games/{gameID}/files/{gameFileID})
	GetGameFile(ctx echo.Context, gameID GameIDInPath, gameFileID GameFileIDInPath) error
	// ゲームファイルのメタ情報の取得
	// (GET /games/{gameID}/files/{gameFileID}/meta)
	GetGameFileMeta(ctx echo.Context, gameID GameIDInPath, gameFileID GameFileIDInPath) error
	// ゲームのジャンル編集
	// (PUT /games/{gameID}/genres)
	PutGameGenres(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム画像一覧の取得
	// (GET /games/{gameID}/images)
	GetGameImages(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム画像の作成
	// (POST /games/{gameID}/images)
	PostGameImage(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム画像のバイナリの取得
	// (GET /games/{gameID}/images/{gameImageID})
	GetGameImage(ctx echo.Context, gameID GameIDInPath, gameImageID GameImageIDInPath) error
	// ゲーム画像のメタ情報の取得
	// (GET /games/{gameID}/images/{gameImageID}/meta)
	GetGameImageMeta(ctx echo.Context, gameID GameIDInPath, gameImageID GameImageIDInPath) error
	// ゲームの管理権限の変更
	// (PATCH /games/{gameID}/roles)
	PatchGameRole(ctx echo.Context, gameID GameIDInPath) error
	// ゲームの管理権限の削除
	// (DELETE /games/{gameID}/roles/{userID})
	DeleteGameRole(ctx echo.Context, gameID GameIDInPath, userID UserIDInPath) error
	// ゲームバージョン一覧の取得
	// (GET /games/{gameID}/versions)
	GetGameVersion(ctx echo.Context, gameID GameIDInPath, params GetGameVersionParams) error
	// ゲームのバージョンの作成
	// (POST /games/{gameID}/versions)
	PostGameVersion(ctx echo.Context, gameID GameIDInPath) error
	// ゲームの最新バージョンの取得
	// (GET /games/{gameID}/versions/latest)
	GetLatestGameVersion(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム動画一覧の取得
	// (GET /games/{gameID}/videos)
	GetGameVideos(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム動画の作成
	// (POST /games/{gameID}/videos)
	PostGameVideo(ctx echo.Context, gameID GameIDInPath) error
	// ゲーム動画のバイナリの取得
	// (GET /games/{gameID}/videos/{gameVideoID})
	GetGameVideo(ctx echo.Context, gameID GameIDInPath, gameVideoID GameVideoIDInPath) error
	// ゲーム動画のメタ情報の取得
	// (GET /games/{gameID}/videos/{gameVideoID}/meta)
	GetGameVideoMeta(ctx echo.Context, gameID GameIDInPath, gameVideoID GameVideoIDInPath) error
	// 全てのジャンルの取得
	// (GET /genres)
	GetGameGenres(ctx echo.Context) error
	// ジャンルの削除
	// (DELETE /genres/{gameGenreID})
	DeleteGameGenre(ctx echo.Context, gameGenreID GameGenreIDInPath) error
	// ジャンル情報の変更
	// (PATCH /genres/{gameGenreID})
	PatchGameGenre(ctx echo.Context, gameGenreID GameGenreIDInPath) error
	// traQのOAuth 2.0のコールバック
	// (GET /oauth2/callback)
	GetCallback(ctx echo.Context, params GetCallbackParams) error
	// OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
	// (GET /oauth2/code)
	GetCode(ctx echo.Context) error
	// traP Collectionの管理画面からのログアウト
	// (POST /oauth2/logout)
	PostLogout(ctx echo.Context) error
	// 座席一覧の取得
	// (GET /seats)
	GetSeats(ctx echo.Context) error
	// 席数の変更
	// (POST /seats)
	PostSeat(ctx echo.Context) error
	// 席の変更
	// (PATCH /seats/{seatID})
	PatchSeatStatus(ctx echo.Context, seatID SeatIDInPath) error
	// traPのメンバー一覧取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// ログイン中ユーザーの情報の取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAdmins converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdmins(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAdmins(ctx)
	return err
}

// PostAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAdmin(ctx echo.Context) error {
	var err error

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAdmin(ctx)
	return err
}

// DeleteAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAdmin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAdmin(ctx, userID)
	return err
}

// GetEditions converts echo context to params.
func (w *ServerInterfaceWrapper) GetEditions(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEditions(ctx)
	return err
}

// PostEdition converts echo context to params.
func (w *ServerInterfaceWrapper) PostEdition(ctx echo.Context) error {
	var err error

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEdition(ctx)
	return err
}

// PostEditionAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) PostEditionAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEditionAuthorize(ctx)
	return err
}

// GetEditionInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetEditionInfo(ctx echo.Context) error {
	var err error

	ctx.Set(EditionAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEditionInfo(ctx)
	return err
}

// DeleteEdition converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEdition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEdition(ctx, editionID)
	return err
}

// GetEdition converts echo context to params.
func (w *ServerInterfaceWrapper) GetEdition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEdition(ctx, editionID)
	return err
}

// PatchEdition converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEdition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEdition(ctx, editionID)
	return err
}

// GetEditionGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEditionGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	ctx.Set(EditionIDAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEditionGames(ctx, editionID)
	return err
}

// PostEditionGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostEditionGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEditionGame(ctx, editionID)
	return err
}

// GetProductKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductKeysParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductKeys(ctx, editionID, params)
	return err
}

// PostProductKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostProductKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostProductKeyParams
	// ------------- Required query parameter "num" -------------

	err = runtime.BindQueryParameter("form", true, true, "num", ctx.QueryParams(), &params.Num)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProductKey(ctx, editionID, params)
	return err
}

// PostActivateProductKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivateProductKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	// ------------- Path parameter "productKeyID" -------------
	var productKeyID ProductKeyIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "productKeyID", runtime.ParamLocationPath, ctx.Param("productKeyID"), &productKeyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productKeyID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivateProductKey(ctx, editionID, productKeyID)
	return err
}

// PostRevokeProductKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostRevokeProductKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "editionID" -------------
	var editionID EditionIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "editionID", runtime.ParamLocationPath, ctx.Param("editionID"), &editionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editionID: %s", err))
	}

	// ------------- Path parameter "productKeyID" -------------
	var productKeyID ProductKeyIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "productKeyID", runtime.ParamLocationPath, ctx.Param("productKeyID"), &productKeyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productKeyID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRevokeProductKey(ctx, editionID, productKeyID)
	return err
}

// GetGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetGames(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams
	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", ctx.QueryParams(), &params.Genre)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter genre: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGames(ctx, params)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// DeleteGame converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameOwnerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGame(ctx, gameID)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameID)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameID)
	return err
}

// GetGameFiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameFiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameFiles(ctx, gameID)
	return err
}

// PostGameFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameFile(ctx, gameID)
	return err
}

// GetGameFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameFileID" -------------
	var gameFileID GameFileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameFileID", runtime.ParamLocationPath, ctx.Param("gameFileID"), &gameFileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameFileID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameFile(ctx, gameID, gameFileID)
	return err
}

// GetGameFileMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameFileMeta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameFileID" -------------
	var gameFileID GameFileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameFileID", runtime.ParamLocationPath, ctx.Param("gameFileID"), &gameFileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameFileID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameFileMeta(ctx, gameID, gameFileID)
	return err
}

// PutGameGenres converts echo context to params.
func (w *ServerInterfaceWrapper) PutGameGenres(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutGameGenres(ctx, gameID)
	return err
}

// GetGameImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImages(ctx, gameID)
	return err
}

// PostGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameImage(ctx, gameID)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameImageID" -------------
	var gameImageID GameImageIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameImageID", runtime.ParamLocationPath, ctx.Param("gameImageID"), &gameImageID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameImageID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameID, gameImageID)
	return err
}

// GetGameImageMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImageMeta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameImageID" -------------
	var gameImageID GameImageIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameImageID", runtime.ParamLocationPath, ctx.Param("gameImageID"), &gameImageID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameImageID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImageMeta(ctx, gameID, gameImageID)
	return err
}

// PatchGameRole converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGameRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameOwnerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGameRole(ctx, gameID)
	return err
}

// DeleteGameRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGameRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "userID" -------------
	var userID UserIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set(GameOwnerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGameRole(ctx, gameID, userID)
	return err
}

// GetGameVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGameVersionParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameVersion(ctx, gameID, params)
	return err
}

// PostGameVersion converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameVersion(ctx, gameID)
	return err
}

// GetLatestGameVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatestGameVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLatestGameVersion(ctx, gameID)
	return err
}

// GetGameVideos converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameVideos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameVideos(ctx, gameID)
	return err
}

// PostGameVideo converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameVideo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	ctx.Set(GameMaintainerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameVideo(ctx, gameID)
	return err
}

// GetGameVideo converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameVideo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameVideoID" -------------
	var gameVideoID GameVideoIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameVideoID", runtime.ParamLocationPath, ctx.Param("gameVideoID"), &gameVideoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameVideoID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameVideo(ctx, gameID, gameVideoID)
	return err
}

// GetGameVideoMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameVideoMeta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameID" -------------
	var gameID GameIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameID", runtime.ParamLocationPath, ctx.Param("gameID"), &gameID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameID: %s", err))
	}

	// ------------- Path parameter "gameVideoID" -------------
	var gameVideoID GameVideoIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameVideoID", runtime.ParamLocationPath, ctx.Param("gameVideoID"), &gameVideoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameVideoID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameVideoMeta(ctx, gameID, gameVideoID)
	return err
}

// GetGameGenres converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameGenres(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameGenres(ctx)
	return err
}

// DeleteGameGenre converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGameGenre(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameGenreID" -------------
	var gameGenreID GameGenreIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameGenreID", runtime.ParamLocationPath, ctx.Param("gameGenreID"), &gameGenreID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameGenreID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGameGenre(ctx, gameGenreID)
	return err
}

// PatchGameGenre converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGameGenre(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameGenreID" -------------
	var gameGenreID GameGenreIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameGenreID", runtime.ParamLocationPath, ctx.Param("gameGenreID"), &gameGenreID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameGenreID: %s", err))
	}

	ctx.Set(AdminAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGameGenre(ctx, gameGenreID)
	return err
}

// GetCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCallback(ctx, params)
	return err
}

// GetCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCode(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// GetSeats converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeats(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	ctx.Set(EditionAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeats(ctx)
	return err
}

// PostSeat converts echo context to params.
func (w *ServerInterfaceWrapper) PostSeat(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSeat(ctx)
	return err
}

// PatchSeatStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSeatStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "seatID" -------------
	var seatID SeatIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "seatID", runtime.ParamLocationPath, ctx.Param("seatID"), &seatID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seatID: %s", err))
	}

	ctx.Set(TrapMemberAuthScopes, []string{})

	ctx.Set(EditionAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSeatStatus(ctx, seatID)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TrapMemberAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admins", wrapper.GetAdmins)
	router.POST(baseURL+"/admins", wrapper.PostAdmin)
	router.DELETE(baseURL+"/admins/:userID", wrapper.DeleteAdmin)
	router.GET(baseURL+"/editions", wrapper.GetEditions)
	router.POST(baseURL+"/editions", wrapper.PostEdition)
	router.POST(baseURL+"/editions/authorize", wrapper.PostEditionAuthorize)
	router.GET(baseURL+"/editions/info", wrapper.GetEditionInfo)
	router.DELETE(baseURL+"/editions/:editionID", wrapper.DeleteEdition)
	router.GET(baseURL+"/editions/:editionID", wrapper.GetEdition)
	router.PATCH(baseURL+"/editions/:editionID", wrapper.PatchEdition)
	router.GET(baseURL+"/editions/:editionID/games", wrapper.GetEditionGames)
	router.PATCH(baseURL+"/editions/:editionID/games", wrapper.PostEditionGame)
	router.GET(baseURL+"/editions/:editionID/keys", wrapper.GetProductKeys)
	router.POST(baseURL+"/editions/:editionID/keys", wrapper.PostProductKey)
	router.POST(baseURL+"/editions/:editionID/keys/:productKeyID/activate", wrapper.PostActivateProductKey)
	router.POST(baseURL+"/editions/:editionID/keys/:productKeyID/revoke", wrapper.PostRevokeProductKey)
	router.GET(baseURL+"/games", wrapper.GetGames)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.DELETE(baseURL+"/games/:gameID", wrapper.DeleteGame)
	router.GET(baseURL+"/games/:gameID", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameID", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameID/files", wrapper.GetGameFiles)
	router.POST(baseURL+"/games/:gameID/files", wrapper.PostGameFile)
	router.GET(baseURL+"/games/:gameID/files/:gameFileID", wrapper.GetGameFile)
	router.GET(baseURL+"/games/:gameID/files/:gameFileID/meta", wrapper.GetGameFileMeta)
	router.PUT(baseURL+"/games/:gameID/genres", wrapper.PutGameGenres)
	router.GET(baseURL+"/games/:gameID/images", wrapper.GetGameImages)
	router.POST(baseURL+"/games/:gameID/images", wrapper.PostGameImage)
	router.GET(baseURL+"/games/:gameID/images/:gameImageID", wrapper.GetGameImage)
	router.GET(baseURL+"/games/:gameID/images/:gameImageID/meta", wrapper.GetGameImageMeta)
	router.PATCH(baseURL+"/games/:gameID/roles", wrapper.PatchGameRole)
	router.DELETE(baseURL+"/games/:gameID/roles/:userID", wrapper.DeleteGameRole)
	router.GET(baseURL+"/games/:gameID/versions", wrapper.GetGameVersion)
	router.POST(baseURL+"/games/:gameID/versions", wrapper.PostGameVersion)
	router.GET(baseURL+"/games/:gameID/versions/latest", wrapper.GetLatestGameVersion)
	router.GET(baseURL+"/games/:gameID/videos", wrapper.GetGameVideos)
	router.POST(baseURL+"/games/:gameID/videos", wrapper.PostGameVideo)
	router.GET(baseURL+"/games/:gameID/videos/:gameVideoID", wrapper.GetGameVideo)
	router.GET(baseURL+"/games/:gameID/videos/:gameVideoID/meta", wrapper.GetGameVideoMeta)
	router.GET(baseURL+"/genres", wrapper.GetGameGenres)
	router.DELETE(baseURL+"/genres/:gameGenreID", wrapper.DeleteGameGenre)
	router.PATCH(baseURL+"/genres/:gameGenreID", wrapper.PatchGameGenre)
	router.GET(baseURL+"/oauth2/callback", wrapper.GetCallback)
	router.GET(baseURL+"/oauth2/code", wrapper.GetCode)
	router.POST(baseURL+"/oauth2/logout", wrapper.PostLogout)
	router.GET(baseURL+"/seats", wrapper.GetSeats)
	router.POST(baseURL+"/seats", wrapper.PostSeat)
	router.PATCH(baseURL+"/seats/:seatID", wrapper.PatchSeatStatus)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.GET(baseURL+"/users/me", wrapper.GetMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"E3ywvS1PAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
