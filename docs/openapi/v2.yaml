openapi: "3.0.3"
servers:
  - url: https://collection.trap.jp/api/v2
  - url: https://collection-dev.trapti.tech/api/v2
  - url: http://localhost:3000/api/v2
  - url: /api/v2 #oapi-codegenでproxy後にもmatchできるようにするため必要
info:
  description: 'traP Collection v2'
  version: '2.0.0'
  title: 'traP Collection v2'
  contact:
    name: traP
    url: 'https://github.com/traPtitech/trap-collection-server'
tags:
  - name: oauth2
    description: |
      OAuth 2.0を利用しての管理画面の認証を行うAPIです。
  - name: user
    description: |
      管理画面のユーザー関連のAPIです。
  - name: admin
    description: |
      traP Collection全体の管理者関連のAPIです。
  - name: game
    description: |
      ゲーム関連のAPIです。
  - name: gameRole
    description: |
      ゲームの管理権限関連のAPIです。
  - name: gameVersion
    description: |
      ゲームのバージョン関連のAPIです。
  - name: gameFile
    description: |
      ゲームのファイル関連のAPIです。
  - name: gameImage
    description: |
      ゲームの画像関連のAPIです。
  - name: gameVideo
    description: |
      ゲームのビデオ関連のAPIです。
  - name: edition
    description: |
      エディション(旧ランチャーバージョン)関連のAPIです。
  - name: editionAuth
    description: |
      ランチャーからのエディション情報取得の認可関連のAPIです。
  - name: seat
    description: |
      席管理関連のAPIです。

paths:
  # oauth2
  /oauth2/callback:
    parameters:
      - $ref: '#/components/parameters/authorizationCodeInQuery'
    get:
      tags:
        - oauth2
      operationId: getCallback
      responses:
        "200":
          description: |
            認証が成功した場合に返されます。
            セッションにユーザー情報が保存され、セッションが切れるまでログイン状態になります。
            また、Code Challengeなどは削除されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            セッション、またはAuthorization Codeになんらかの誤りがあり、
            認証に失敗した場合に返されます。
            誤りの内容はレスポンスのmessageに出力されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traQのOAuth 2.0のコールバック
      description: |
        traQ上での認証後にtraQから
        Authorization Codeがクエリパラメーターにつけられて、
        リダイレクトされます。
  /oauth2/code:
    get:
      tags:
        - oauth2
      operationId: getCode
      responses:
        "303":
          headers:
            Set-Cookie:
              schema: 
                type: string
                example: sessions=abcd1234; Path=/; Expires=Wed, 04 May 2022 16:24:11 GMT; Max-Age=2592000; HttpOnly; Secure
            Location:
              schema:
                type: string
                example: https://q.trap.jp/api/v3/oauth2/authorize?response_type=code&client_id=<ClientID>&code_challenge=<Code Challenge>&code_challenge_method=S256
          description: |
            セッションの設定などに成功した場合に返されます。
            traQの認可ページにリダイレクトされます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
      description: |
        OAuth 2.0を利用しての認証に必要なPKCEのCode Verifierを生成し、
        セッションに設定した上でCode ChallengeやClientIDなどを設定したtraQのURLへリダイレクトします。
  /oauth2/logout:
    post:
      tags:
        - oauth2
      security:
        - TrapMemberAuth: []
      operationId: postLogout
      responses:
        "204":
          description: |
            ログアウトに成功した場合に返されます。
            セッションが削除されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            セッションになんらかの誤りがあり、
            認証に失敗した場合に返されます。
            誤りの内容はレスポンスのmessageに出力されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traP Collectionの管理画面からのログアウト
      description: |
        traP Collectionの管理画面からログアウトします。
        成功するとセッションが削除されます。

  # user
  /users/me:
    get:
      tags:
        - user
      security:
        - TrapMemberAuth: []
      operationId: getMe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: |
            自分の情報の取得に成功した際に返されます。
            レスポンスでログインしているユーザーの情報が返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ログイン中ユーザーの情報の取得
      description: |
        ログイン中のユーザーの情報を取得します。
  /users:
    get:
      tags:
        - user
      security:
        - TrapMemberAuth: []
      operationId: getUsers
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traPのメンバー一覧取得
      description: |
        traPのアクティブメンバーの一覧を取得します。

  # admin
  /admins:
    post:
      tags:
        - admin
      security:
        - AdminAuth: []
      operationId: postAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: |
            traP Collection全体の管理者の追加に成功した際に返されます。
            レスポンスで変更後のtraP Collection全体の管理者一覧が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストの形式が正しくない、または、
            ユーザーIDに対応するユーザーが存在しない場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traP Collection全体の管理者追加
      description: |
        traP Collection全体の管理者を追加します。
        このAPIは管理者のみが利用できます。
    get:
      tags:
        - admin
      security:
        - TrapMemberAuth: []
      operationId: getAdmins
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: |
            traP Collection全体の管理者一覧の取得に成功した際に返されます。
            レスポンスでtraP Collection全体の管理者の一覧が返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traPの管理者一覧取得
      description: |
        traP Collection全体の管理者の一覧を取得します。
  /admins/{userID}:
    parameters:
      - $ref: '#/components/parameters/userIDInPath'
    delete:
      tags:
        - admin
      security:
        - AdminAuth: []
      operationId: deleteAdmin
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: |
            traP Collection全体の管理者の削除に成功した際に返されます。
            レスポンスで変更後のtraP Collection全体の管理者一覧が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストの形式が正しくない、または、
            ユーザーIDに対応するユーザーが存在しない場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: traP Collection全体の管理者削除
      description: |
        traP Collection全体の管理者を削除します。
        このAPIは管理者のみが利用できます。

  # game
  /games:
    post:
      tags:
        - game
      security:
        - TrapMemberAuth: []
      operationId: postGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGame'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: |
            ゲームの追加に成功した際に返されます。
            レスポンスで新しく追加されたゲームの情報が返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの追加
      description: |
        新しくゲームを追加します。
        このエンドポイントを叩いたユーザーは
        自動的にownerとなります。
    get:
      tags:
        - game
      security:
        - TrapMemberAuth: []
      parameters:
        - name: all
          in: query
          required: false
          schema:
            type: boolean
          description: |
            trueを指定すると、全てのゲーム、
            falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。
            デフォルトはtrueです。
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: |
            取得するゲームの上限数を指定します。
            指定なしの場合は制限なしです。
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
          description: |
            取得するゲームの開始位置を指定します。
            指定なしの場合は0となります。
      operationId: getGames
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGamesResponse'
          description: |
            ゲームの一覧の取得に成功した際に返されます。
            レスポンスで取得したゲームの一覧と条件を満たすゲームの数が返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム一覧の取得
      description: |
        ゲームの一覧を取得します。
        作成時刻での降順で結果が返されます。
  /games/{gameID}:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    get:
      tags:
        - game
      security:
        - TrapMemberAuth: []
      operationId: getGame
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: |
            ゲームの情報の取得に成功した際に返されます。
            レスポンスで取得したゲームの情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームIDが不正な値である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0による認証が通過できない、かつ、
            ランチャー用のアクセストークンによるBearer認証も通過できない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム情報の取得
      description: |
        指定したゲームIDのゲームの情報を取得します。
    patch:
      tags:
        - game
      security:
        - GameMaintainerAuth: []
      operationId: patchGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchGame'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameInfo'
          description: |
            ゲームの情報の修正に成功した際に返されます。
            レスポンスで修正後のゲームの情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームID、またはリクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            このゲームのmaintainer、ownerのどちらでもない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの情報の変更
      description: |
        指定したゲームIDのゲームの情報を修正します。
    delete:
      tags:
        - game
      security:
        - GameOwnerAuth: []
      operationId: deleteGame
      responses:
        "200":
          description: |
            ゲームの削除に成功した際に返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームIDが不正な値である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            このゲームのownerでない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの削除
      description: |
        指定したゲームIDのゲームを削除します。

  # gameRole
  /games/{gameID}/roles:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    patch:
      tags:
        - gameRole
      security:
        - GameOwnerAuth: []
      operationId: patchGameRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRoleRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: |
            ゲームの管理権限の変更に成功した際に返されます。
            レスポンスで変更後のowner、maintainerを含むゲーム情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームID、またはリクエストが不正である場合に返されます。
            既にmaintainerまたはownerとなっているユーザーが含まれる場合にも返されます。
            一人しかいないownerがmaintainerに変更されようとしている場合にも返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            このゲームのownerでない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの管理権限の変更
      description: |
        指定したゲームIDのゲームの管理者を追加します。
        既に指定のユーザーが権限(ownerまたはmaintainer)として登録されている場合は、
        指定された権限で権限を上書きします。
  /games/{gameID}/roles/{userID}:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/userIDInPath'
    delete:
      tags:
        - gameRole
      security:
        - GameOwnerAuth: []
      operationId: deleteGameRole
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: |
            ゲームの管理権限の変更に成功した際に返されます。
            レスポンスで変更後のowner、maintainerを含むゲーム情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームID、またはリクエストが不正である場合に返されます。
            削除によりゲームにownerが存在しなくなる場合にも返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            このゲームのownerでない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの管理権限の削除
      description: |
        指定したゲームIDのゲームの管理権限を削除します。
        ownerは1人以上はいる必要があるため、
        削除によりownerがいなくなる場合はエラーとなります。

  # gameVersion
  /games/{gameID}/versions:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    post:
      tags:
        - gameVersion
      security:
        - GameMaintainerAuth: []
      operationId: postGameVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameVersion'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameVersion'
          description: |
            ゲームのバージョンの作成に成功した際に返されます。
            レスポンスで作成したゲームのバージョンが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームID、またはリクエストが不正である場合に返されます。
            ゲームファイルの種類とwindows,darwin,jarの対応が誤っている場合もこのエラーとなります。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            このゲームのmaintainer、ownerのどちらでもない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームのバージョンの作成
      description: |
        指定したゲームIDのゲームにバージョンを作成します。
    get:
      tags:
        - gameVersion
      security:
        - TrapMemberAuth: []
      operationId: getGameVersion
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: |
            取得するゲームバージョンの上限数を指定します。
            指定なしの場合は制限なしです。
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
          description: |
            取得するゲームバージョンの開始位置を指定します。
            指定なしの場合は0となります。
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGameVersionsResponse'
          description: |
            ゲームバージョン一覧の取得に成功した際に返されます。
            レスポンスで取得したゲームバージョンの一覧が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームIDが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームバージョン一覧の取得
      description: |
        指定したゲームIDのゲームのバージョン一覧を取得します。
        作成時刻での降順で結果が返されます。
  /games/{gameID}/versions/latest:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    get:
      tags:
        - gameVersion
      security:
        - TrapMemberAuth: []
      operationId: getLatestGameVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameVersion'
          description: |
            ゲームの最新バージョンの取得に成功した際に返されます。
            レスポンスで取得したゲームの最新バージョンが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ゲームIDが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
            また、API v1で追加され、バージョンが存在しないゲームであった場合にも返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームの最新バージョンの取得
      description: |
        指定したゲームIDのゲームの最新バージョンを取得します。

  # gameFile
  /games/{gameID}/files:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    post:
      tags:
        - gameFile
      security:
        - GameMaintainerAuth: []
      operationId: postGameFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewGameFile'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameFile'
          description: |
            ゲームファイルの作成に成功した際に返されます。
            レスポンスで作成したゲームファイルのメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームファイルの作成
      description: |
        指定したゲームIDのゲームにファイルを作成します。
        作成したゲームファイルは、1日以内にゲームバージョンと紐づけられない場合自動で削除されます。
    get:
      tags:
        - gameFile
      security:
        - TrapMemberAuth: []
      operationId: getGameFiles
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameFile'
          description: |
            ゲームファイルの取得に成功した際に返されます。
            アップロード済みゲームファイルのメタ情報一覧が降順で返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームファイル一覧の取得
      description: |
        指定したゲームIDのゲームのアップロード済みファイル一覧を返します。
        ゲームバージョンと紐づけられていないファイルも含まれる点に注意。
  /games/{gameID}/files/{gameFileID}:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameFileIDInPath'
    get:
      tags:
        - gameFile
      security:
        - TrapMemberAuth: []
        - EditionGameFileAuth: []
      operationId: getGameFile
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/GameFileContent'
          description: |
            ゲームファイルの取得に成功した際に返されます。
            レスポンスで取得したゲームファイルのバイナリが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ファイルIDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションにこのファイルに対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームファイルが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームファイルのバイナリの取得
      description: |
        指定したゲームファイルIDのゲームファイルを取得します。
  /games/{gameID}/files/{gameFileID}/meta:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameFileIDInPath'
    get:
      tags:
        - gameFile
      security:
        - TrapMemberAuth: []
        - EditionGameFileAuth: []
      operationId: getGameFileMeta
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameFile'
          description: |
            ゲームファイルのメタ情報の取得に成功した際に返されます。
            レスポンスで取得したゲームファイルのメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            ファイルIDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションにこのファイルに対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームファイルが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲームファイルのメタ情報の取得
      description: |
        指定したゲームファイルIDのゲームファイルを取得します。

  # gameImage
  /games/{gameID}/images:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    post:
      tags:
        - gameImage
      security:
        - GameMaintainerAuth: []
      operationId: postGameImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewGameImage'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameImage'
          description: |
            ゲーム画像の作成に成功した際に返されます。
            レスポンスで作成したゲーム画像のメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム画像の作成
      description: |
        指定したゲームIDのゲームに画像を作成します。
        作成したゲーム画像は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
    get:
      tags:
        - gameImage
      security:
        - TrapMemberAuth: []
      operationId: getGameImages
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameImage'
          description: |
            ゲーム画像一覧の取得に成功した際に返されます。
            アップロード済みゲーム画像のメタ情報一覧が作成時刻の降順で返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲームが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム画像一覧の取得
      description: |
        指定したゲームIDのアップロード済みゲーム画像一覧を返します。
        ゲームバージョンに紐づけられていないゲーム画像も含まれる点に注意。
  /games/{gameID}/images/{gameImageID}:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameImageIDInPath'
    get:
      tags:
        - gameImage
      security:
        - TrapMemberAuth: []
        - EditionGameImageAuth: []
      operationId: getGameImage
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/GameImageContent'
          description: |
            ゲーム画像の取得に成功した際に返されます。
            レスポンスで取得したゲーム画像のバイナリが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            画像IDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションにこの画像に対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム画像が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム画像のバイナリの取得
      description: |
        指定したゲーム画像IDのゲーム画像を取得します。
  /games/{gameID}/images/{gameImageID}/meta:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameImageIDInPath'
    get:
      tags:
        - gameImage
      security:
        - TrapMemberAuth: []
        - EditionGameImageAuth: []
      operationId: getGameImageMeta
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameImage'
          description: |
            ゲーム画像のメタ情報の取得に成功した際に返されます。
            レスポンスで取得したゲーム画像のメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            画像IDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションにこの画像に対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム画像が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム画像のメタ情報の取得
      description: |
        指定したゲーム画像IDのゲーム画像のメタ情報を取得します。

  # gameVideo
  /games/{gameID}/videos:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
    post:
      tags:
        - gameVideo
      security:
        - GameMaintainerAuth: []
      operationId: postGameVideo
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewGameVideo'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameVideo'
          description: |
            ゲーム動画の作成に成功した際に返されます。
            レスポンスで作成したゲーム動画のメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム動画が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム動画の作成
      description: |
        指定したゲームIDのゲームに動画を作成します。
        作成したゲーム動画は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
    get:
      tags:
        - gameVideo
      security:
        - TrapMemberAuth: []
      operationId: getGameVideos
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameVideo'
          description: |
            ゲーム動画の一覧取得に成功した際に返されます。
            アップロード済みゲーム動画のメタ情報一覧が作成時刻の降順で返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム動画が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム動画一覧の取得
      description: |
        指定したゲームIDのゲームのアップロード済み動画一覧を取得します。
        ゲームバージョンに紐づけられていなくても一覧に含まれる点に注意。
  /games/{gameID}/videos/{gameVideoID}:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameVideoIDInPath'
    get:
      tags:
        - gameVideo
      security:
        - TrapMemberAuth: []
        - EditionGameVideoAuth: []
      operationId: getGameVideo
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/GameVideoContent'
          description: |
            ゲーム動画の取得に成功した際に返されます。
            レスポンスで取得したゲーム動画のバイナリが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            動画IDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            またはアクセストークンに対応するエディションにこの動画に対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム動画が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム動画のバイナリの取得
      description: |
        指定したゲーム動画IDのゲーム動画を取得します。
  /games/{gameID}/videos/{gameVideoID}/meta:
    parameters:
      - $ref: '#/components/parameters/gameIDInPath'
      - $ref: '#/components/parameters/gameVideoIDInPath'
    get:
      tags:
        - gameVideo
      security:
        - TrapMemberAuth: []
        - EditionGameVideoAuth: []
      operationId: getGameVideoMeta
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameVideo'
          description: |
            ゲーム動画のメタ情報の取得に成功した際に返されます。
            レスポンスで取得したゲーム動画のメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            動画IDが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できず、かつ、
            ランチャー用のアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションにこの動画に対応するゲームバージョンが含まれない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのゲーム動画が存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ゲーム動画のメタ情報の取得
      description: |
        指定したゲーム動画IDのゲーム動画のメタ情報を取得します。

  # edition
  /editions:
    post:
      tags:
        - edition
      security:
        - AdminAuth: []
      operationId: postEdition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEdition'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edition'
          description: |
            エディションの作成に成功した際に返されます。
            レスポンスで作成したエディションのメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディションの作成
      description: |
        エディションを作成します。
    get:
      tags:
        - edition
      security:
        - TrapMemberAuth: []
      operationId: getEditions
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edition'
          description: |
            エディションの取得に成功した際に返されます。
            レスポンスで取得したエディションのリストが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディション一覧の取得
      description: |
        エディションの一覧を取得します。
  /editions/{editionID}:
    parameters:
      - $ref: '#/components/parameters/editionIDInPath'
    get:
      tags:
        - edition
      security:
        - TrapMemberAuth: []
      operationId: getEdition
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edition'
          description: |
            エディションの取得に成功した際に返されます。
            レスポンスで取得したエディションのメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのエディションが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディション情報の取得
      description: |
        指定したeditionIDのエディションのメタ情報を取得します。
    patch:
      tags:
        - edition
      security:
        - AdminAuth: []
      operationId: patchEdition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEdition'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edition'
          description: |
            エディションの変更に成功した際に返されます。
            レスポンスで変更したエディションのメタ情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのエディションが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディション情報の変更
      description: |
        指定したeditionIDのエディションの情報を変更します。
    delete:
      tags:
        - edition
      security:
        - AdminAuth: []
      operationId: deleteEdition
      responses:
        "200":
          description: |
            エディションの削除に成功した際に返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのエディションが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディションの削除
      description: |
        指定したエディションを削除します。
  /editions/{editionID}/games:
    parameters:
      - $ref: '#/components/parameters/editionIDInPath'
    patch:
      tags:
        - edition
      security:
        - AdminAuth: []
      operationId: postEditionGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEditionGameRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EditionGameResponse'
          description: |
            エディションのゲームの変更に成功した際に返されます。
            レスポンスで変更後のエディションに紐づいたゲームとゲームバージョン一覧が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディションのゲームの変更
      description: |
        エディションにゲームを追加します。
    get:
      tags:
        - edition
      security:
        - TrapMemberAuth: []
        - EditionIDAuth: []
      operationId: getEditionGames
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EditionGameResponse'
          description: |
            エディションに紐づくゲームとバージョンの一覧の取得に成功した際に返されます。
            レスポンスで取得したゲームとバージョンのリストが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            traQのOAuth 2.0認証を通過できない、かつ、
            ランチャーのアクセストークンによるBearer認証を通過できない、
            または、アクセストークンに対応するエディションとeditionIDが一致しない場合に返されます。
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのエディションが存在しない、または削除されている場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディションに紐づくゲームの一覧の取得
      description: |
        エディションに紐づくゲームの一覧を取得します。

  # editionAuth
  /editions/{editionID}/keys:
    parameters:
      - $ref: '#/components/parameters/editionIDInPath'
    post:
      tags:
        - editionAuth
      security:
        - AdminAuth: []
      parameters:
        - $ref: '#/components/parameters/productKeyNumInQuery'
      operationId: postProductKey
      responses:
        "201":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductKey'
          description: |
            プロダクトキーの発行に成功した際に返されます。
            レスポンスで発行したプロダクトキーのリストが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: プロダクトキーの生成
      description: |
        ランチャーからのエディション情報取得の認可用プロダクトキーを生成します。
    get:
      tags:
        - editionAuth
      security:
        - AdminAuth: []
      parameters:
        - $ref: '#/components/parameters/productKeyStatusInQuery'
      operationId: getProductKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductKey'
          description: |
            エディションに紐づくプロダクトキーの取得に成功した際に返されます。
            レスポンスで取得したプロダクトキーのリストが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: プロダクトキーの一覧の取得
      description: |
        エディションに対するプロダクトキーの一覧を取得します。
  /editions/{editionID}/keys/{productKeyID}/activate:
    parameters:
      - $ref: '#/components/parameters/editionIDInPath'
      - $ref: '#/components/parameters/productKeyIDInPath'
    post:
      tags:
        - editionAuth
      security:
        - AdminAuth: []
      operationId: postActivateProductKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductKey'
          description: |
            プロダクトキーの再有効化に成功した際に返されます。
            変更後のプロダクトキーの情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのプロダクトキーが存在しない、または既に有効な場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: プロダクトキーの再有効化
      description: |
        エディションに対するプロダクトキーを再有効化します。
  /editions/{editionID}/keys/{productKeyID}/revoke:
    parameters:
      - $ref: '#/components/parameters/editionIDInPath'
      - $ref: '#/components/parameters/productKeyIDInPath'
    post:
      tags:
        - editionAuth
      security:
        - AdminAuth: []
      operationId: postRevokeProductKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductKey'
          description: |
            プロダクトキーの失効に成功した際に返されます。
            変更後のプロダクトキーの情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "403":
          $ref: '#/components/responses/AdminForbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            指定したIDのプロダクトキーが存在しない、または既に失効している場合に返されます。
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: プロダクトキーの失効
      description: |
        エディションに対するプロダクトキーを失効(revoke)します。
  /editions/authorize:
    post:
      tags:
        - editionAuth
      operationId: postEditionAuthorize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditionAuthorizeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditionAccessToken'
          description: |
            ランチャーのエディション情報取得の認可に成功した際に返されます。
            ランチャーのBearer認証に使用するトークンが返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "403":
          $ref: '#/components/responses/EditionForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: ランチャーの認可リクエスト
      description: |
        ランチャーのエディション情報取得の認可リクエストを行います。
        リクエストに成功すると、アクセストークンが返されます。
        このアクセストークンを用いたBearer認証で、エディション情報取得用のAPIを利用することができます。
  /editions/info:
    get:
      tags:
        - editionAuth
      operationId: getEditionInfo
      security:
        - EditionAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edition'
          description: |
            エディション情報取得に成功した際に返されます。
            エディション情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "403":
          $ref: '#/components/responses/EditionForbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: エディション情報の取得
      description: |
        アクセストークンをもとにエディションの情報を取得します。

  #seat
  /seats:
    post:
      tags:
        - seat
      operationId: postSeat
      security:
        - TrapMemberAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSeatRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
          description: |
            席数の変更に成功した際に返されます。
            変更後の席一覧が返されます。
            並び順は席idの昇順です。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: 席数の変更
      description: |
        席数を変更します。
        既に存在していた席(例:20席から100席への変更ならidが1~20の席、100席から20席ならidが1~20の席)の
        着席状態は変更されず、そのまま保持されます。
    get:
      tags:
        - seat
      operationId: getSeats
      security:
        - TrapMemberAuth: []
        - EditionAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
          description: |
            座席一覧の取得に成功した際に返されます。
            座席一覧が返されます。
            並び順は席idの昇順です。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: 座席一覧の取得
      description: |
        座席一覧を取得します。
  /seats/{seatID}:
    parameters:
      - $ref: '#/components/parameters/seatIDInPath'
    patch:
      tags:
        - seat
      operationId: patchSeatStatus
      security:
        - TrapMemberAuth: []
        - EditionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSeatStatusRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
          description: |
            席の変更に成功した際に返されます。
            変更後の席情報が返されます。
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            リクエストが不正である場合に返されます。
        "401":
          $ref: '#/components/responses/TraPUnauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: 席の変更
      description: |
        席の変更を行います。

components:
  responses:
    TraPUnauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        traQのOAuth 2.0での認証がされていない、
        もしくは認証したが既にセッションが切れている場合に返されます。
    AdminForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        adminでない場合に返されます。
    EditionForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        Bearer認証のアクセストークンが誤っている、
        もしくは既に有効期限が切れている場合に返されます。
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        何らかの予期しないエラーが発生した場合に返されます。
        このレスポンスが返された場合、サーバーのバグやインフラの障害の可能性が高いです。
  securitySchemes:
    TrapMemberAuth:
      type: apiKey
      in: cookie
      name: sessions
      description: |
        traQのOAuth 2.0を利用してのログインをすでにしている場合のみアクセスできます。
        ユーザーがtraQで凍結された場合、1日以内に反映されます。
    GameMaintainerAuth:
      type: apiKey
      in: cookie
      name: sessions
      description: |
        ゲームのmaintainer以上の権限を持っている、
        またはtraP Collectionの管理者である場合のみアクセスできます。
        ユーザーがtraQで凍結された場合、1日以内に反映されます。
    GameOwnerAuth:
      type: apiKey
      in: cookie
      name: sessions
      description: |
        ゲームのowner以上の権限を持っている、
        またはtraP Collectionの管理者である場合のみアクセスできます。
        ユーザーがtraQで凍結された場合、1日以内に反映されます。
    AdminAuth:
      type: apiKey
      in: cookie
      name: sessions
      description: |
        traP Collectionの管理者である場合のみアクセスできます。
        ユーザーがtraQで凍結された場合、1日以内に反映されます。
    EditionAuth:
      type: http
      scheme: bearer
      description: |
        プロダクトキーを利用して得られるアクセストークンを利用した認証です。
        アクセストークンが正しく、有効期限が切れていない場合にのみアクセスできます。
        プロダクトキーがrevokeされた場合、即座に反映されます。
    EditionIDAuth:
      type: http
      scheme: bearer
      description: |
        プロダクトキーを利用して得られるアクセストークンを利用した認証です。
        アクセストークンが正しく、有効期限が切れていないかつ、
        editionIDを対応するエディションが一致する場合にのみアクセスできます。
        プロダクトキーがrevokeされた場合、即座に反映されます。
    EditionGameFileAuth:
      type: http
      scheme: bearer
      description: |
        プロダクトキーを利用して得られるアクセストークンを利用した認証です。
        アクセストークンから得られるエディションに、
        ファイルIDで指定されたファイルに対応するゲームが含まれる場合のみアクセスできます。
        プロダクトキーがrevokeされた場合、即座に反映されます。
    EditionGameImageAuth:
      type: http
      scheme: bearer
      description: |
        プロダクトキーを利用して得られるアクセストークンを利用した認証です。
        アクセストークンから得られるエディションに、
        画像IDで指定された画像に対応するゲームが含まれる場合のみアクセスできます。
        プロダクトキーがrevokeされた場合、即座に反映されます。
    EditionGameVideoAuth:
      type: http
      scheme: bearer
      description: |
        プロダクトキーを利用して得られるアクセストークンを利用した認証です。
        アクセストークンから得られるエディションに、
        動画IDで指定された動画に対応するゲームが含まれる場合のみアクセスできます。
        プロダクトキーがrevokeされた場合、即座に反映されます。
  parameters:
    authorizationCodeInQuery:
      name: code
      in: query
      required: true
      schema:
        type: string
      description: |
        OAuth 2.0のAuthorization Codeです。
    productKeyNumInQuery:
      name: num
      in: query
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 100
      description: |
        生成するプロダクトキーの数を示すクエリパラメータです。
    productKeyStatusInQuery:
      name: status
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/ProductKeyStatus'
      description: |
        プロダクトキーのステータスを示すクエリパラメータです。
        指定がない場合は全てのステータスのプロダクトキーが返されます。
    userIDInPath:
      name: userID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
      description: |
        ユーザーIDを示すパスパラメータです。
    editionIDInPath:
      name: editionID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: |
        エディションのIDを示すパスパラメータです。
    gameIDInPath:
      name: gameID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameID'
      description: |
        ゲームのIDを示すパスパラメータです。
    gameFileIDInPath:
      name: gameFileID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameFileID'
      description: |
        ゲームのファイルのIDを示すパスパラメータです。
    gameImageIDInPath:
      name: gameImageID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameImageID'
      description: |
        ゲームの画像のIDを示すパスパラメータです。
    gameVideoIDInPath:
      name: gameVideoID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameVideoID'
      description: |
        ゲームの動画のIDを示すパスパラメータです。
    productKeyIDInPath:
      name: productKeyID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: |
        プロダクトキーのIDを示すパスパラメータです。
    seatIDInPath:
      name: seatID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/SeatID'
      description: |
        席のIDを示すパスパラメータです。
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
      required:
        - message
      additionalProperties: false
    UserRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserID'
      required:
        - id
      description: |
        ユーザーを指定するリクエストです。
      additionalProperties: false
    GetGamesResponse:
      type: object
      properties:
        num:
          type: integer
          description: |
            limit、offsetが適用される前のゲームの数です。
        games:
          type: array
          items:
            $ref: '#/components/schemas/GameInfo'
          description: |
            limit、offsetが適用された後のゲームの一覧です。
      required:
        - num
        - games
      additionalProperties: false
      description: |
        ゲームの一覧を取得します。
        ページングのために、limit、offsetを適用する前のゲームの数をnumで返しています。
    GameRoleRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        type:
          $ref: '#/components/schemas/GameRoleType'
      required:
        - id
      additionalProperties: false
      description: |
        ゲームのロールを指定するリクエストです。
    GetGameVersionsResponse:
      type: object
      properties:
        num:
          type: integer
          description: |
            limit、offsetが適用される前のゲームバージョンの数です。
        versions:
          type: array
          items:
            $ref: '#/components/schemas/GameVersion'
          description: |
            limit、offsetが適用された後のゲームバージョンの一覧です。
      required:
        - num
        - versions
      additionalProperties: false
      description: |
        ゲームバージョンの一覧を取得します。
        ページングのために、limit、offsetを適用する前のゲームバージョンの数もnumで返しています。
    PatchEditionGameRequest:
      type: object
      properties:
        gameVersionIDs:
          type: array
          items:
            $ref: '#/components/schemas/GameVersionID'
      required:
        - gameVersionIDs
      additionalProperties: false
      description: |
        エディションのゲームを変更するためのリクエストです。
    EditionGameResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/GameInfo'
        - type: object
          properties:
            version:
              $ref: '#/components/schemas/GameVersion'
          required:
            - version
          additionalProperties: false
      description: |
        エディションに紐づけられた
        ゲームとバージョンの情報です。
    EditionAuthorizeRequest:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/ProductKeyValue'
      required:
        - key
      additionalProperties: false
      description: |
        ランチャーのエディション情報取得認可のリクエストです。
    PostSeatRequest:
      type: object
      properties:
        num:
          type: integer
          minimum: 1
          description: |
            席数です。
      required:
        - num
      additionalProperties: false
      description: |
        席数を変更するためのリクエストです。
    PatchSeatStatusRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SeatStatus'
      required:
        - status
      additionalProperties: false
      description: |
        席の着席状態を変更するためのリクエストです。

    # エンティティ
    # ユーザー
    User:
      description: ユーザー
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        name:
          $ref: '#/components/schemas/UserName'
      required:
        - id
        - name
      additionalProperties: false

    # ゲーム
    NewGame:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GameName'
        description:
          $ref: '#/components/schemas/GameDescription'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/UserName'
          description: |
            ゲームのownerの一覧です。
            指定されない場合、空配列として扱われます。
            ゲームの作成を実行したユーザーは、このリストに含まれていなくてもownerとなります。
            また、このリストにゲームの作成を実行したユーザーが含まれていた場合、
            400エラーになります。
        maintainers:
          type: array
          items:
            $ref: '#/components/schemas/UserName'
          description: |
            ゲームのmaintainerの一覧です。
            指定されない場合、空配列として扱われます。
            ゲームの作成を実行したユーザーを含むownerと重複するユーザーが存在した場合、
            400エラーとなります。
      required:
        - name
        - description
      additionalProperties: false
      description: |
        ゲームを新しく作成する際に必要な情報です。
    PatchGame:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GameName'
        description:
          $ref: '#/components/schemas/GameDescription'
      required:
        - name
        - description
      additionalProperties: false
      description: |
        ゲームの情報を修正する際に必要な情報です。
    Game:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameID'
        name:
          $ref: '#/components/schemas/GameName'
        description:
          $ref: '#/components/schemas/GameDescription'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/UserName'
          description: |
            ゲームのownerの一覧です。
        maintainers:
          type: array
          items:
            $ref: '#/components/schemas/UserName'
          description: |
            ゲームのmaintainerの一覧です。
            maintainerがいない場合、このフィールドは存在しません。
        createdAt:
          $ref: '#/components/schemas/GameCreatedAt'
      required:
        - id
        - name
        - description
        - owners
        - createdAt
      additionalProperties: false
      description: |
        ゲームの情報です。
    GameInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameID'
        name:
          $ref: '#/components/schemas/GameName'
        description:
          $ref: '#/components/schemas/GameDescription'
        createdAt:
          $ref: '#/components/schemas/GameCreatedAt'
      required:
        - id
        - name
        - description
        - createdAt
      additionalProperties: false
      description: |
        ゲームの情報です。

    # ゲームバージョン
    NewGameVersion:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GameVersionName'
        description:
          $ref: '#/components/schemas/GameVersionDescription'
        url:
          $ref: '#/components/schemas/GameURL'
        files:
          $ref: '#/components/schemas/GameVersionFiles'
        imageID:
          $ref: '#/components/schemas/GameImageID'
        videoID:
          $ref: '#/components/schemas/GameVideoID'
      required:
        - name
        - description
        - imageID
        - videoID
      additionalProperties: false
      description: |
        新しいゲームのバージョンの作成に必要な情報です。
        url、filesはゲームの種類に応じていずれかが存在します。
    GameVersion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameVersionID'
        name:
          $ref: '#/components/schemas/GameVersionName'
        description:
          $ref: '#/components/schemas/GameVersionDescription'
        url:
          $ref: '#/components/schemas/GameURL'
        files:
          $ref: '#/components/schemas/GameVersionFiles'
        imageID:
          $ref: '#/components/schemas/GameImageID'
        videoID:
          $ref: '#/components/schemas/GameVideoID'
        createdAt:
          $ref: '#/components/schemas/GameVersionCreatedAt'
      required:
        - id
        - name
        - description
        - imageID
        - videoID
        - createdAt
      additionalProperties: false
      description: |
        ゲームのバージョンです。
        url、filesはゲームの種類に応じていずれかが存在します。
    GameVersionFiles:
      type: object
      properties:
        win32:
          $ref: '#/components/schemas/GameFileID'
        darwin:
          $ref: '#/components/schemas/GameFileID'
        jar:
          $ref: '#/components/schemas/GameFileID'
      additionalProperties: false
      description: |
        ゲームバージョンに紐づいたファイルの情報です。

    # ゲームファイル
    NewGameFile:
      type: object
      properties:
        type:
          # OpenAPI Generatorのバグで、enumだとクライアントの生成がうまくいかないので、
          # 一旦stringにしている
          type: string
          example: 'jar'
        entryPoint:
          $ref: '#/components/schemas/GameFileEntryPoint'
        content:
          $ref: '#/components/schemas/GameFileContent'
      required:
        - type
        - entryPoint
        - content
      additionalProperties: false
      description: |
        ゲームのファイルを新しく作成する際に必要な情報です。
    GameFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameFileID'
        type:
          $ref: '#/components/schemas/GameFileType'
        md5:
          $ref: '#/components/schemas/GameFileMd5'
        entryPoint:
          $ref: '#/components/schemas/GameFileEntryPoint'
        createdAt:
          $ref: '#/components/schemas/GameFileCreatedAt'
      required:
        - id
        - type
        - md5
        - entryPoint
        - createdAt
      additionalProperties: false
      description: |
        ゲームのファイルのメタ情報です。

    # ゲーム画像
    NewGameImage:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/GameImageContent'
      required:
        - content
      additionalProperties: false
      description: |
        ゲームの画像を新しく作成する際に必要な情報です。
    GameImage:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameImageID'
        mime:
          $ref: '#/components/schemas/GameImageMime'
        createdAt:
          $ref: '#/components/schemas/GameImageCreatedAt'
      required:
        - id
        - mime
        - createdAt
      additionalProperties: false
      description: |
        ゲームの画像のメタ情報です。

    # ゲーム動画
    NewGameVideo:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/GameVideoContent'
      required:
        - content
      additionalProperties: false
      description: |
        ゲームの動画を新しく作成する際に必要な情報です。
    GameVideo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GameVideoID'
        mime:
          $ref: '#/components/schemas/GameVideoMime'
        createdAt:
          $ref: '#/components/schemas/GameVideoCreatedAt'
      required:
        - id
        - mime
        - createdAt
      additionalProperties: false
      description: |
        ゲームの動画のメタ情報です。

    # エディション
    PatchEdition:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/EditionName'
        questionnaire:
          $ref: '#/components/schemas/EditionQuestionnaireURL'
      required:
        - name
      additionalProperties: false
      description: |
        エディションの情報を修正する際に必要な情報です。
    NewEdition:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/EditionName'
        questionnaire:
          $ref: '#/components/schemas/EditionQuestionnaireURL'
        gameVersions:
          type: array
          minLength: 1
          items:
            $ref: '#/components/schemas/GameVersionID'
      required:
        - name
        - gameVersions
      additionalProperties: false
      description: |
        エディションを新しく作成する際に必要な情報です。
        questionnaireは工大祭などのアンケートが必要な際のみ存在します。
    Edition:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EditionID'
        name:
          $ref: '#/components/schemas/EditionName'
        questionnaire:
          $ref: '#/components/schemas/EditionQuestionnaireURL'
        createdAt:
          $ref: '#/components/schemas/EditionCreatedAt'
      required:
        - id
        - name
        - createdAt
      additionalProperties: false
      description: |
        エディションです。
        questionnaireは工大祭などのアンケートが必要な際のみ存在します。

    # ランチャーのエディション情報取得の認可
    ProductKey:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProductKeyID'
        key:
          $ref: '#/components/schemas/ProductKeyValue'
        status:
          $ref: '#/components/schemas/ProductKeyStatus'
        createdAt:
          $ref: '#/components/schemas/ProductKeyCreatedAt'
      required:
        - id
        - key
        - status
        - createdAt
      additionalProperties: false
    EditionAccessToken:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/EditionAccessTokenValue'
        expiresAt:
          $ref: '#/components/schemas/EditionAccessTokenExpiresAt'
      required:
        - accessToken
        - expiresAt
      additionalProperties: false

    # 席
    Seat:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SeatID'
        status:
          $ref: '#/components/schemas/SeatStatus'
      required:
        - id
        - status
      additionalProperties: false
      description: |
        席の情報です。

    # 値オブジェクト
    # ユーザー
    UserID:
      type: string
      format: uuid
      description: |
        ユーザーのIDです。
        traQのユーザーのUUIDと対応します。
    UserName:
      type: string
      example: mazrean
      maxLength: 32
      description: |
        ユーザー名です。
        traQのユーザーのUUIDでないmazreanなどのIDと対応します。

    # ゲーム
    GameID:
      type: string
      format: uuid
      description: |
        ゲームのIDです。
    GameName:
      type: string
      minLength: 1
      maxLength: 256
      example: 'PrestoRay'
      description: |
        ゲームの名前です。
    GameDescription:
      type: string
      minLength: 0
      maxLength: 1000
      example: |
        光を操作して進む、3Dのレースゲームです。
        光は超高速ですが、その分制御するのが非常に難しくなっています。
        コースを3周する時間を競うタイムアタックモードには、オンラインランキングを搭載。
      description: |
        ゲームの説明です。
        ランチャーでも表示されます。
    GameCreatedAt:
      type: string
      format: date-time
      description: |
        ゲームがtraP Collectionに追加された時刻です。

    # ゲームの管理権限
    GameRoleType:
      type: string
      enum:
        - owner
        - maintainer
      description: |
        ゲームの管理権限の種類です。
        ownerはゲームの所有者で、ゲーム情報の変更や管理者の変更ができます。
        maintainerはゲームのメンテナーで、ゲーム情報の変更のみできます。

    # ゲームバージョン
    GameVersionID:
      type: string
      format: uuid
      description: |
        ゲームのバージョンのIDです。
    GameVersionName:
      type: string
      pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
      example: 'v1.0.0'
      description: |
        ゲームのバージョン名です。
        セマンティックバージョニングに沿った文字列が許容されます。
    GameVersionDescription:
      type: string
      minLength: 0
      maxLength: 500
      example: |
        - 新機能1の追加
        - 新機能2の追加
      description: |
        ゲームのバージョンの説明です。
        主にゲームの開発者向けの情報で、ランチャーでは表示されません。
    GameVersionCreatedAt:
      type: string
      format: date-time
      description: |
        ゲームのバージョンが作成された時刻です。

    # ゲームファイル
    GameFileID:
      type: string
      format: uuid
      description: |
        ゲームファイルのIDです。
    GameFileType:
      type: string
      enum:
        - jar
        - win32
        - darwin
      description: |
        ゲームファイルのタイプです。
        jarはJavaで起動しWindows、OSXの両方で実行できるもの、
        windowsはWindows用の実行ファイル、
        macはOSX用の実行ファイルです。
    GameFileMd5:
      type: string
      pattern: ^[0-9a-f]{32}$
      example: 3bccfb0579ab5d81289c459aa8c9a1b0
      description: |
        ゲームファイルのmd5ハッシュ値です。
    GameFileEntryPoint:
      type: string
      example: PPP.exe
      description: |
        ゲームファイルの解凍後の実行ファイルのパスです。
    GameFileContent:
      type: string
      format: binary
      description: |
        ゲームの実行ファイルやデータをzipしたバイナリです。
    GameFileCreatedAt:
      type: string
      format: date-time
      description: |
        ゲームファイルが作成された時刻です。

    # ゲームURL
    GameURL:
      type: string
      format: uri
      description: |
        ゲームのURLの値です。

    # ゲーム画像
    GameImageID:
      type: string
      format: uuid
      description: |
        ゲーム画像のIDです。
    GameImageMime:
      type: string
      enum:
        - image/jpeg
        - image/png
        - image/gif
      description: |
        ゲーム画像のmimeです。
    GameImageContent:
      type: string
      format: binary
      description: |
        ゲーム画像のバイナリです。
    GameImageCreatedAt:
      type: string
      format: date-time
      description: |
        ゲーム画像の作成時刻です。

    # ゲーム紹介動画
    GameVideoID:
      type: string
      format: uuid
      description: |
        ゲーム紹介動画のIDです。
    GameVideoMime:
      type: string
      enum:
        - video/mp4
      description: |
        ゲーム紹介動画のmimeです。
    GameVideoContent:
      type: string
      format: binary
      description: |
        ゲーム紹介動画のバイナリです。
    GameVideoCreatedAt:
      type: string
      format: date-time
      description: |
        ゲーム紹介動画の作成時刻です。

    # エディション
    EditionID:
      type: string
      format: uuid
      description: |
        エディションのIDです。
    EditionName:
      type: string
      maxLength: 32
      description: |
        エディション名です。
    EditionQuestionnaireURL:
      type: string
      format: uri
      description: |
        エディションのアンケートのURLです。
    EditionCreatedAt:
      type: string
      format: date-time
      description: |
        エディションが作成された時刻です。

    # ランチャーのエディション情報取得の認可
    ProductKeyID:
      type: string
      format: uuid
      description: |
        プロダクトキーのIDです。
    ProductKeyValue:
      type: string
      pattern: '^[0-9a-zA-Z]{5}-[0-9a-zA-Z]{5}-[0-9a-zA-Z]{5}-[0-9a-zA-Z]{5}-[0-9a-zA-Z]{5}'
      example: 12345-ABCDE-67890-FGHIJ-KLMNO
      description: |
        プロダクトキーの値です。
        暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
    ProductKeyStatus:
      type: string
      enum:
        - active
        - revoked
    ProductKeyCreatedAt:
      type: string
      format: date-time
      description: |
        プロダクトキーが作成された時刻です。
    EditionAccessTokenValue:
      type: string
      maxLength: 36
      minLength: 36
      pattern: '[0-9a-zA-Z]{36}'
      example: 1234567890abcdef1234567890abcdef1234
      description: |
        アクセストークンです。
        暗号的にランダムな英数字36文字です。
    EditionAccessTokenExpiresAt:
      type: string
      format: date-time
      description: |
        アクセストークンの有効期限です。

    # 席
    SeatID:
      type: integer
      minimum: 1
      description: |
        席のIDです。
    SeatStatus:
      type: string
      enum:
        - in-use
        - empty
      description: |
        席の状態です。
        in-useは使用中、emptyは空席です。
