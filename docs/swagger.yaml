openapi: 3.0.0
servers:
  - url: '/api'
info:
  description: "traPCollectionのAPI"
  version: "1.0.0"
  title: "traPCollection API"
paths:
  /check/{versionID}:
    get:
      tags:
        - check
      description: "ブラウザゲーム以外のゲームのID,MD5を返します。"
      parameters:
        - $ref: '#/components/parameters/versionID'
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    md5:
                      type: string
                    body_updated_at:
                      description: ゲーム本体の更新日時。
                      type: string
                      format: date-time
                    img_updated_at:
                      description: 画像の更新日時。
                      type: string
                      format: date-time
                    movie_updated_at:
                      description: 動画の更新日時。
                      type: string
                      format: date-time
        500:
          description: "失敗時のレスポンス"
  /game/file/{gameID}:
    get:
      tags:
        - game
      description: "gameIDで指定されたゲームのZipファイルを返します。"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"
        500:
          description: "失敗時のレスポンス"
    put:
      tags:
        - game
      summary: "ブラウザゲーム以外の更新"
      description: "gameIDで指定されたゲームのZipファイルを更新します。"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: "成功時のレスポンス"
        500:
          description: "失敗時のレスポンス"
  /game/browser/{gameID}:
    get:
      tags:
        - game
      description: "gameIDで指定されたゲームのURLを返します。"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            application/zip:
              schema:
                type: "string"
                format: "byte"
        500:
          description: "失敗時のレスポンス"
    put:
      tags:
        - game
      description: ブラウザゲームの更新。
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: "成功時のレスポンス"
        500:
          description: "失敗時のレスポンス"
  /game/{gameID}:
    get:
      tags:
        - game
      description: 指定したゲームの情報の取得。
      responses:
        200:
          description: 成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        500:
          description: 失敗したときのレスポンス。
    put:
      tags:
        - game
      description: "指定されたゲームの名前を変更します。"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: "成功時のレスポンス"
        500:
          description: "失敗時のレスポンス"
    delete:
      tags:
        - game
      description: "指定したIDのゲームの削除"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "成功した時のレスポンス"
        500:
          description: "失敗した時のレスポンス"
  /game:
    post:
      tags:
        - game
      description: "指定された名前でファイルを保存します。"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Update'
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            application/json:
              schema:
                type: "string"
                example: "game has uploaded"
        500:
          description: "失敗時のレスポンス"
    get:
      tags:
        - game
      description: "ゲームの一覧を返します。"
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        500:
          description: "失敗時のレスポンス"
  /game/image/{versionID}:
    get:
      tags:
        - game
      description: ゲーム画像のダウンロード。
      parameters:
        - $ref: '#/components/parameters/versionID'
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        500:
          description: "失敗時のレスポンス"
  /game/image/{gameID}:
    put:
      tags:
        - game
      description: "ゲームの画像ファイルを更新します。"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: "成功時のレスポンス"
        500:
          description: "失敗時のレスポンス"
  /game/movie/{versionID}:
    get:
      tags:
        - game
      description: ゲーム映像のダウンロード。
      parameters:
        - $ref: '#/components/parameters/versionID'
      responses:
        200:
          description: "成功時のレスポンス"
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        500:
          description: "失敗時のレスポンス"
  /game/movie/{gameID}:
    put:
      tags:
        - game
      description: "ゲームの動画ファイルを更新します。"
      parameters:
      - name: "gameID"
        in: "path"
        description: "ゲームのID"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: "成功時のレスポンス"
        500:
          description: "失敗時のレスポンス"
  /version:
    post:
      tags:
        - version
      description: 新しいバージョンを作成します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVersion'
      responses:
        '200':
          description: 正常にバージョンを作成できました．作成されたバージョンを返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '500':
          description: 正常に作成できませんでした。リクエストが不正です。
    get:
      tags:
        - version
      description: バージョン一覧の取得。
      responses:
        '200':
          description: 正常にバージョンを取得できました．バージョンの一覧を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '500':
          description: 正常に取得できませんでした。リクエストが不正です。
    put:
      tags:
        - version
      description: バージョンの更新。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVersion'
      responses:
        '200':
          description: 正常にバージョンを更新できました．更新されたバージョンを返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '500':
          description: 正常に更新できませんでした。リクエストが不正です。
  /question/{versionID}:
    post:
      tags:
        - question
      description: 新しいアンケートを作成します．
      parameters:
        - $ref: '#/components/parameters/versionID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewQuestion'
      responses:
        '200':
          description: 正常に質問を作成できました．作成された質問を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '400':
          description: 正常に作成できませんでした。リクエストが不正です。
    get:
      tags:
        - question
      responses:
        '200':
          description: 正常に質問を取得できました．取得した質問を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '400':
          description: 正常に取得できませんでした。リクエストが不正です。
  /question/{questionID}:
    patch:
      tags:
        - question
      description: 質問を変更します．
      parameters:
        - $ref: '#/components/parameters/questionID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        '200':
          description: 正常に質問を変更できました．
        '400':
          description: 正常に変更できませんでした。リクエストが不正です。

    delete:
      tags:
        - question
      description: 質問を削除します．
      parameters:
        - $ref: '#/components/parameters/questionID'
      responses:
        '200':
          description: 正常に質問を削除できました。
        '400':
          description: 正常に削除できませんでした。存在しない質問です。
  /response:
    post:
      tags:
        - response
      description: 新しい回答を作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewResponse'
      responses:
        '200':
          description: 正常に回答を作成できました．作成された回答を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewResponse'
    get:
      tags:
        - response
      description: 回答を取得します
      responses:
        200:
          description: 正常に回答を取得しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /response/answer:
    get:
      tags:
        - response
      description: 回答を取ってきます
      responses:
          '200':
            description: 正常に回答を作成できました．作成された回答を返します．
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AnswerCalc'
          500:
            description: 失敗しました。
  /response/game:
    get:
      tags:
        - response
      description: 回答を取ってきます
      responses:
          '200':
            description: 正常に回答を作成できました．作成された回答を返します．
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AnswerCalc'
          500:
            description: 失敗しました。
  /seat/{seatID}:
    post:
      tags:
        - seat
      description: 席の状態を更新します。
      parameters:
          - $ref: '#/components/parameters/seatID'
      responses:
        200:
          description: 更新に成功しました。
        500:
          description: 更新に失敗しました。
    delete:
      tags:
        - seat
      description: 席の状態を更新します。
      parameters:
          - $ref: '#/components/parameters/seatID'
      responses:
        200:
          description: 更新に成功しました。
        500:
          description: 更新に失敗しました。
  /seat:
    get:
      tags:
        - seat
      description: 席の状態を取得します。
      responses:
        200:
          description: 取得に成功しました。
          content:
            application/json:
              schema:
                description: 状態inの席の一覧を取得します。
                type: array
                items:
                  type: string
                  description: 埋まっている席のIDの一覧
        500:
          description: 取得に失敗しました。
components:
  parameters:
    versionID:
      name: versionID
      in: path # パラメータをパス内に含める
      description: バージョンのID
      required: true
      schema:
        type: string

    questionID:
      name: questionID
      in: path
      required: true
      description: |
        質問ID
      schema:
        type: string

    responseID:
      name: responseID
      in: path
      required: true
      description: |
        回答ID
      schema:
        type: string
    
    seatID:
      name: seatID
      in: path
      required: true
      description: |
        席ID
      schema:
        type: string

  schemas:
    Update:
      type: "object"
      properties:
        name:
          type: "string"
          format: "byte"
        type:
          type: string
        file:
          type: "string"
          format: "binary"
        image:
          type: "string"
          format: "binary"
        movie:
          type: string
          format: binary

    Question:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        content:
          type: string
        choices:
            type: array
            items:
                type: string
        required:
          type: boolean
        created_at:
          type: string
          format: date-time

    NewQuestion:
      type: object
      properties:
        type:
          type: string
        content:
          type: string
        choices:
          type: array
          items:
            type: string
        required:
          type: boolean

    Response:
      type: object
      properties:
        id:
          description: クライアントID。UUID。
          type: string
        answer:
          $ref: '#/components/schemas/AnswerResponse'
        game:
          $ref: '#/components/schemas/GameResponse'
        remark:
          description: 自由記述欄。
          type: string

    NewResponse:
      type: object
      properties:
        id:
          description: クライアントID。UUID。
          type: string
        answer:
          $ref: '#/components/schemas/AnswerResponse'
        game:
          $ref: '#/components/schemas/GameResponse'
        remark:
          description: 自由記述欄。
          type: string

    AnswerResponse:
      type: object
      properties:
        id:
          description: 質問のID
          type: string
          example: 1
        contents:
          description: 回答の配列。チェックボックスの場合のみ複数。
          type: array
          items:
            type: string

    GameResponse:
      type: object
      properties:
        id:
          description: ゲームのID。
          type: string
        rate:
          description: 星の数。
          type: integer
        time:
          description: プレイ時間(ms)。
          type: integer

    ResponseCalc:
      type: object
      properties:
        id:
          description: クライアントID。UUID。
          type: string
        answer:
          type: array
          items:
            $ref: '#/components/schemas/AnswerCalc'
        game:
          type: array
          items:
            $ref: '#/components/schemas/GameCalc'
        remark:
          description: 自由記述欄。
          type: array
          items:
            type: string

    AnswerCalc:
      type: object
      properties:
        id:
          description: 質問のID
          type: string
          example: 1
        contents:
          description: 回答の配列。チェックボックスの場合のみ複数。
          type: array
          items:
            type: object
            properties:
                name:
                  type: string
                num:
                  type: integer

    GameCalc:
      type: object
      properties:
        id:
          description: ゲームのID。
          type: string
        rate:
          description: 星の数。
          type: array
          items:
            type: object
            properties:
              star:
                type: integer
              num:
                type: integer
        time:
          description: 平均プレイ時間(ms)。
          type: integer
    NewVersion:
      type: object
      description: 新しいバージョン。
      properties:
        name:
          description: バージョン名。
          type: string
        game:
          description: ゲーム。
          type: array
          items:
            description: ゲームのID。
            type: string
    Version:
      type: object
      description: 新しいバージョン。
      properties:
        id:
          description: ゲームのID。
          type: string
        name:
          description: バージョン名。
          type: string
        game:
          description: ゲーム。
          type: array
          items:
            description: ゲームのID。
            type: string
    Game:
      type: object
      description: ゲーム。
      properties:
        id:
          description: ID。
          type: string
        name:
          description: 名前。
          type: string
        type:
          description: タイプ。
          type: string
        created_at:
          description: 作成日時。
          type: string
          format: date-time
