/*
 * traPCollection API
 *
 * traPCollection„ÅÆAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/comail/colog"

	"github.com/traPtitech/trap-collection-server/pkg/common"
	"github.com/traPtitech/trap-collection-server/src"
	"github.com/traPtitech/trap-collection-server/src/domain/values"
)

func main() {
	env := os.Getenv("COLLECTION_ENV")
	storageEnv := os.Getenv("STORAGE")

	isProduction := env != "development" && env != "mock"
	isSwift := storageEnv != "local"

	secret, ok := os.LookupEnv("SESSION_SECRET")
	if !ok {
		panic("SESSION_SECRET is not set")
	}

	if !isProduction {
		colog.SetMinLevel(colog.LDebug)
		colog.SetFormatter(&colog.StdFormatter{
			Colors: true,
			Flag:   log.Ldate | log.Ltime | log.Lshortfile,
		})
	} else {
		colog.SetMinLevel(colog.LError)
		colog.SetFormatter(&colog.StdFormatter{
			Colors: false,
			Flag:   log.Ldate | log.Ltime | log.Lshortfile,
		})
	}

	colog.Register()

	clientID := os.Getenv("CLIENT_ID")
	if len(clientID) == 0 {
		panic(errors.New("ENV CLIENT_ID IS NULL"))
	}
	clientSecret := os.Getenv("CLIENT_SECRET")
	if len(clientSecret) == 0 {
		panic(errors.New("ENV CLIENT_SECRET IS NULL"))
	}

	traQBaseURL, err := url.Parse("https://q.trap.jp/api/v3")
	if err != nil {
		panic(fmt.Errorf("failed to parse traQBaseURL: %w", err))
	}

	strAdministrators, ok := os.LookupEnv("ADMINISTRATORS")
	if !ok {
		panic("ENV ADMINISTRATORS is not set")
	}
	administrators := []values.TraPMemberName{}
	for _, strAdministrator := range strings.Split(strings.TrimSpace(strAdministrators), ",") {
		administrator := values.NewTrapMemberName(strAdministrator)
		err := administrator.Validate()
		if err != nil {
			panic(fmt.Sprintf("failed to parse administrator: %v\n", err))
		}

		administrators = append(administrators, administrator)
	}

	var (
		filePath        string
		swiftAuthURL    common.SwiftAuthURL
		swiftUserName   common.SwiftUserName
		swiftPassword   common.SwiftPassword
		swiftTenantID   common.SwiftTenantID
		swiftTenantName common.SwiftTenantName
		swiftContainer  common.SwiftContainer
		swiftTmpURLKey  common.SwiftTmpURLKey
	)
	if isSwift {
		strSwiftAuthURL, ok := os.LookupEnv("OS_AUTH_URL")
		if !ok {
			panic("ENV OS_AUTH_URL is not set")
		}
		swiftAuthURL, err = url.Parse(strSwiftAuthURL)
		if err != nil {
			panic(fmt.Errorf("failed to parse swiftAuthURL: %w", err))
		}

		strSwiftUserName, ok := os.LookupEnv("OS_USERNAME")
		if !ok {
			panic("ENV OS_USERNAME is not set")
		}
		swiftUserName = common.SwiftUserName(strSwiftUserName)

		strSwiftPassword, ok := os.LookupEnv("OS_PASSWORD")
		if !ok {
			panic("ENV OS_PASSWORD is not set")
		}
		swiftPassword = common.SwiftPassword(strSwiftPassword)

		strSwiftTenantID, ok := os.LookupEnv("OS_TENANT_ID")
		if !ok {
			panic("ENV OS_TENANT_ID is not set")
		}
		swiftTenantID = common.SwiftTenantID(strSwiftTenantID)

		strSwiftTenantName, ok := os.LookupEnv("OS_TENANT_NAME")
		if !ok {
			panic("ENV OS_TENANT_NAME is not set")
		}
		swiftTenantName = common.SwiftTenantName(strSwiftTenantName)

		strSwiftContainer, ok := os.LookupEnv("OS_CONTAINER")
		if !ok {
			panic("ENV OS_CONTAINER is not set")
		}
		swiftContainer = common.SwiftContainer(strSwiftContainer)

		strSwiftTmpURLKey, ok := os.LookupEnv("OS_TMP_URL_KEY")
		if !ok {
			panic("ENV OS_TMP_URL_KEY is not set")
		}
		swiftTmpURLKey = common.SwiftTmpURLKey(strSwiftTmpURLKey)
	} else {
		filePath, ok = os.LookupEnv("FILE_PATH")
		if !ok {
			panic("ENV FILE_PATH is not set")
		}
	}

	service, err := src.InjectAPI(&src.Config{
		IsProduction:    common.IsProduction(isProduction),
		IsSwift:         common.IsSwift(isSwift),
		SessionKey:      "sessions",
		SessionSecret:   common.SessionSecret(secret),
		TraQBaseURL:     common.TraQBaseURL(traQBaseURL),
		OAuthClientID:   common.ClientID(clientID),
		Administrators:  administrators,
		SwiftAuthURL:    swiftAuthURL,
		SwiftUserName:   swiftUserName,
		SwiftPassword:   swiftPassword,
		SwiftTenantID:   swiftTenantID,
		SwiftTenantName: swiftTenantName,
		SwiftContainer:  swiftContainer,
		SwiftTmpURLKey:  swiftTmpURLKey,
		FilePath:        common.FilePath(filePath),
		HttpClient:      http.DefaultClient,
	})
	if err != nil {
		panic(err)
	}
	defer service.DB.Close()

	err = service.API.Start(os.Getenv("PORT"))
	if err != nil {
		panic(err)
	}
}
