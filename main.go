/*
 * traPCollection API
 *
 * traPCollection„ÅÆAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"errors"
	"fmt"
	"log"
	"os"

	"github.com/comail/colog"
	"github.com/labstack/echo-contrib/session"
	echo "github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"

	"github.com/traPtitech/trap-collection-server/model"
	"github.com/traPtitech/trap-collection-server/openapi"
	"github.com/traPtitech/trap-collection-server/pkg/common"
	"github.com/traPtitech/trap-collection-server/router"
	sess "github.com/traPtitech/trap-collection-server/session"
	"github.com/traPtitech/trap-collection-server/src"
)

func main() {
	log.Printf("Server started")
	env := os.Getenv("COLLECTION_ENV")

	isProduction := env != "development" && env != "mock"

	db, err := model.EstablishDB()
	if err != nil {
		panic(err)
	}
	defer db.Close()

	err = model.Migrate(env)
	if err != nil {
		panic(err)
	}

	sess, err := sess.NewSession(db.DB())
	if err != nil {
		panic(fmt.Errorf("Failed In Session Constructor: %w", err))
	}

	e := echo.New()
	e.Use(session.Middleware(sess.Store()))
	e.Use(middleware.Recover())

	if !isProduction {
		colog.SetMinLevel(colog.LDebug)
		colog.SetFormatter(&colog.StdFormatter{
			Colors: true,
			Flag:   log.Ldate | log.Ltime | log.Lshortfile,
		})

		db.LogMode(true)

		e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
			Format: `${time_rfc3339_nano} ${host} ${method} ${uri} ${status} ${header}` + "\n",
		}))
		e.Use(middleware.Logger())
	} else {
		colog.SetMinLevel(colog.LError)
		colog.SetFormatter(&colog.StdFormatter{
			Colors: false,
			Flag:   log.Ldate | log.Ltime | log.Lshortfile,
		})
	}

	colog.Register()

	clientID := os.Getenv("CLIENT_ID")
	if len(clientID) == 0 {
		panic(errors.New("ENV CLIENT_ID IS NULL"))
	}
	clientSecret := os.Getenv("CLIENT_SECRET")
	if len(clientSecret) == 0 {
		panic(errors.New("ENV CLIENT_SECRET IS NULL"))
	}

	newAPI, err := src.InjectAPI(common.IsProduction(isProduction))
	if err != nil {
		panic(err)
	}

	api, err := router.NewAPI(newAPI, sess, env, clientID, clientSecret)
	if err != nil {
		panic(err)
	}

	openapi.SetupRouting(e, api)

	err = e.Start(os.Getenv("PORT"))
	if err != nil {
		panic(err)
	}
}
